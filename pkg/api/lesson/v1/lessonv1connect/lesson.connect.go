// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lesson/v1/lesson.proto

package lessonv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/eslsoft/lession/pkg/api/lesson/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LessonServiceName is the fully-qualified name of the LessonService service.
	LessonServiceName = "lesson.v1.LessonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LessonServiceCreateLessonProcedure is the fully-qualified name of the LessonService's
	// CreateLesson RPC.
	LessonServiceCreateLessonProcedure = "/lesson.v1.LessonService/CreateLesson"
	// LessonServiceGetLessonProcedure is the fully-qualified name of the LessonService's GetLesson RPC.
	LessonServiceGetLessonProcedure = "/lesson.v1.LessonService/GetLesson"
	// LessonServiceListLessonsProcedure is the fully-qualified name of the LessonService's ListLessons
	// RPC.
	LessonServiceListLessonsProcedure = "/lesson.v1.LessonService/ListLessons"
	// LessonServiceUpdateLessonProcedure is the fully-qualified name of the LessonService's
	// UpdateLesson RPC.
	LessonServiceUpdateLessonProcedure = "/lesson.v1.LessonService/UpdateLesson"
	// LessonServiceDeleteLessonProcedure is the fully-qualified name of the LessonService's
	// DeleteLesson RPC.
	LessonServiceDeleteLessonProcedure = "/lesson.v1.LessonService/DeleteLesson"
)

// LessonServiceClient is a client for the lesson.v1.LessonService service.
type LessonServiceClient interface {
	CreateLesson(context.Context, *connect.Request[v1.CreateLessonRequest]) (*connect.Response[v1.CreateLessonResponse], error)
	GetLesson(context.Context, *connect.Request[v1.GetLessonRequest]) (*connect.Response[v1.GetLessonResponse], error)
	ListLessons(context.Context, *connect.Request[v1.ListLessonsRequest]) (*connect.Response[v1.ListLessonsResponse], error)
	UpdateLesson(context.Context, *connect.Request[v1.UpdateLessonRequest]) (*connect.Response[v1.UpdateLessonResponse], error)
	DeleteLesson(context.Context, *connect.Request[v1.DeleteLessonRequest]) (*connect.Response[v1.DeleteLessonResponse], error)
}

// NewLessonServiceClient constructs a client for the lesson.v1.LessonService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLessonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LessonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	lessonServiceMethods := v1.File_lesson_v1_lesson_proto.Services().ByName("LessonService").Methods()
	return &lessonServiceClient{
		createLesson: connect.NewClient[v1.CreateLessonRequest, v1.CreateLessonResponse](
			httpClient,
			baseURL+LessonServiceCreateLessonProcedure,
			connect.WithSchema(lessonServiceMethods.ByName("CreateLesson")),
			connect.WithClientOptions(opts...),
		),
		getLesson: connect.NewClient[v1.GetLessonRequest, v1.GetLessonResponse](
			httpClient,
			baseURL+LessonServiceGetLessonProcedure,
			connect.WithSchema(lessonServiceMethods.ByName("GetLesson")),
			connect.WithClientOptions(opts...),
		),
		listLessons: connect.NewClient[v1.ListLessonsRequest, v1.ListLessonsResponse](
			httpClient,
			baseURL+LessonServiceListLessonsProcedure,
			connect.WithSchema(lessonServiceMethods.ByName("ListLessons")),
			connect.WithClientOptions(opts...),
		),
		updateLesson: connect.NewClient[v1.UpdateLessonRequest, v1.UpdateLessonResponse](
			httpClient,
			baseURL+LessonServiceUpdateLessonProcedure,
			connect.WithSchema(lessonServiceMethods.ByName("UpdateLesson")),
			connect.WithClientOptions(opts...),
		),
		deleteLesson: connect.NewClient[v1.DeleteLessonRequest, v1.DeleteLessonResponse](
			httpClient,
			baseURL+LessonServiceDeleteLessonProcedure,
			connect.WithSchema(lessonServiceMethods.ByName("DeleteLesson")),
			connect.WithClientOptions(opts...),
		),
	}
}

// lessonServiceClient implements LessonServiceClient.
type lessonServiceClient struct {
	createLesson *connect.Client[v1.CreateLessonRequest, v1.CreateLessonResponse]
	getLesson    *connect.Client[v1.GetLessonRequest, v1.GetLessonResponse]
	listLessons  *connect.Client[v1.ListLessonsRequest, v1.ListLessonsResponse]
	updateLesson *connect.Client[v1.UpdateLessonRequest, v1.UpdateLessonResponse]
	deleteLesson *connect.Client[v1.DeleteLessonRequest, v1.DeleteLessonResponse]
}

// CreateLesson calls lesson.v1.LessonService.CreateLesson.
func (c *lessonServiceClient) CreateLesson(ctx context.Context, req *connect.Request[v1.CreateLessonRequest]) (*connect.Response[v1.CreateLessonResponse], error) {
	return c.createLesson.CallUnary(ctx, req)
}

// GetLesson calls lesson.v1.LessonService.GetLesson.
func (c *lessonServiceClient) GetLesson(ctx context.Context, req *connect.Request[v1.GetLessonRequest]) (*connect.Response[v1.GetLessonResponse], error) {
	return c.getLesson.CallUnary(ctx, req)
}

// ListLessons calls lesson.v1.LessonService.ListLessons.
func (c *lessonServiceClient) ListLessons(ctx context.Context, req *connect.Request[v1.ListLessonsRequest]) (*connect.Response[v1.ListLessonsResponse], error) {
	return c.listLessons.CallUnary(ctx, req)
}

// UpdateLesson calls lesson.v1.LessonService.UpdateLesson.
func (c *lessonServiceClient) UpdateLesson(ctx context.Context, req *connect.Request[v1.UpdateLessonRequest]) (*connect.Response[v1.UpdateLessonResponse], error) {
	return c.updateLesson.CallUnary(ctx, req)
}

// DeleteLesson calls lesson.v1.LessonService.DeleteLesson.
func (c *lessonServiceClient) DeleteLesson(ctx context.Context, req *connect.Request[v1.DeleteLessonRequest]) (*connect.Response[v1.DeleteLessonResponse], error) {
	return c.deleteLesson.CallUnary(ctx, req)
}

// LessonServiceHandler is an implementation of the lesson.v1.LessonService service.
type LessonServiceHandler interface {
	CreateLesson(context.Context, *connect.Request[v1.CreateLessonRequest]) (*connect.Response[v1.CreateLessonResponse], error)
	GetLesson(context.Context, *connect.Request[v1.GetLessonRequest]) (*connect.Response[v1.GetLessonResponse], error)
	ListLessons(context.Context, *connect.Request[v1.ListLessonsRequest]) (*connect.Response[v1.ListLessonsResponse], error)
	UpdateLesson(context.Context, *connect.Request[v1.UpdateLessonRequest]) (*connect.Response[v1.UpdateLessonResponse], error)
	DeleteLesson(context.Context, *connect.Request[v1.DeleteLessonRequest]) (*connect.Response[v1.DeleteLessonResponse], error)
}

// NewLessonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLessonServiceHandler(svc LessonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	lessonServiceMethods := v1.File_lesson_v1_lesson_proto.Services().ByName("LessonService").Methods()
	lessonServiceCreateLessonHandler := connect.NewUnaryHandler(
		LessonServiceCreateLessonProcedure,
		svc.CreateLesson,
		connect.WithSchema(lessonServiceMethods.ByName("CreateLesson")),
		connect.WithHandlerOptions(opts...),
	)
	lessonServiceGetLessonHandler := connect.NewUnaryHandler(
		LessonServiceGetLessonProcedure,
		svc.GetLesson,
		connect.WithSchema(lessonServiceMethods.ByName("GetLesson")),
		connect.WithHandlerOptions(opts...),
	)
	lessonServiceListLessonsHandler := connect.NewUnaryHandler(
		LessonServiceListLessonsProcedure,
		svc.ListLessons,
		connect.WithSchema(lessonServiceMethods.ByName("ListLessons")),
		connect.WithHandlerOptions(opts...),
	)
	lessonServiceUpdateLessonHandler := connect.NewUnaryHandler(
		LessonServiceUpdateLessonProcedure,
		svc.UpdateLesson,
		connect.WithSchema(lessonServiceMethods.ByName("UpdateLesson")),
		connect.WithHandlerOptions(opts...),
	)
	lessonServiceDeleteLessonHandler := connect.NewUnaryHandler(
		LessonServiceDeleteLessonProcedure,
		svc.DeleteLesson,
		connect.WithSchema(lessonServiceMethods.ByName("DeleteLesson")),
		connect.WithHandlerOptions(opts...),
	)
	return "/lesson.v1.LessonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LessonServiceCreateLessonProcedure:
			lessonServiceCreateLessonHandler.ServeHTTP(w, r)
		case LessonServiceGetLessonProcedure:
			lessonServiceGetLessonHandler.ServeHTTP(w, r)
		case LessonServiceListLessonsProcedure:
			lessonServiceListLessonsHandler.ServeHTTP(w, r)
		case LessonServiceUpdateLessonProcedure:
			lessonServiceUpdateLessonHandler.ServeHTTP(w, r)
		case LessonServiceDeleteLessonProcedure:
			lessonServiceDeleteLessonHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLessonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLessonServiceHandler struct{}

func (UnimplementedLessonServiceHandler) CreateLesson(context.Context, *connect.Request[v1.CreateLessonRequest]) (*connect.Response[v1.CreateLessonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lesson.v1.LessonService.CreateLesson is not implemented"))
}

func (UnimplementedLessonServiceHandler) GetLesson(context.Context, *connect.Request[v1.GetLessonRequest]) (*connect.Response[v1.GetLessonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lesson.v1.LessonService.GetLesson is not implemented"))
}

func (UnimplementedLessonServiceHandler) ListLessons(context.Context, *connect.Request[v1.ListLessonsRequest]) (*connect.Response[v1.ListLessonsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lesson.v1.LessonService.ListLessons is not implemented"))
}

func (UnimplementedLessonServiceHandler) UpdateLesson(context.Context, *connect.Request[v1.UpdateLessonRequest]) (*connect.Response[v1.UpdateLessonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lesson.v1.LessonService.UpdateLesson is not implemented"))
}

func (UnimplementedLessonServiceHandler) DeleteLesson(context.Context, *connect.Request[v1.DeleteLessonRequest]) (*connect.Response[v1.DeleteLessonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lesson.v1.LessonService.DeleteLesson is not implemented"))
}
