// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lession/v1/asset_service.proto

package lessionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/eslsoft/lession/pkg/api/lession/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AssetServiceName is the fully-qualified name of the AssetService service.
	AssetServiceName = "lession.v1.AssetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AssetServiceCreateUploadProcedure is the fully-qualified name of the AssetService's CreateUpload
	// RPC.
	AssetServiceCreateUploadProcedure = "/lession.v1.AssetService/CreateUpload"
	// AssetServiceGetUploadProcedure is the fully-qualified name of the AssetService's GetUpload RPC.
	AssetServiceGetUploadProcedure = "/lession.v1.AssetService/GetUpload"
	// AssetServiceCompleteUploadProcedure is the fully-qualified name of the AssetService's
	// CompleteUpload RPC.
	AssetServiceCompleteUploadProcedure = "/lession.v1.AssetService/CompleteUpload"
	// AssetServiceGetAssetProcedure is the fully-qualified name of the AssetService's GetAsset RPC.
	AssetServiceGetAssetProcedure = "/lession.v1.AssetService/GetAsset"
	// AssetServiceListAssetsProcedure is the fully-qualified name of the AssetService's ListAssets RPC.
	AssetServiceListAssetsProcedure = "/lession.v1.AssetService/ListAssets"
	// AssetServiceUpdateAssetProcedure is the fully-qualified name of the AssetService's UpdateAsset
	// RPC.
	AssetServiceUpdateAssetProcedure = "/lession.v1.AssetService/UpdateAsset"
	// AssetServiceDeleteAssetProcedure is the fully-qualified name of the AssetService's DeleteAsset
	// RPC.
	AssetServiceDeleteAssetProcedure = "/lession.v1.AssetService/DeleteAsset"
)

// AssetServiceClient is a client for the lession.v1.AssetService service.
type AssetServiceClient interface {
	// CreateUpload establishes a new upload session and returns client instructions.
	CreateUpload(context.Context, *connect.Request[v1.CreateUploadRequest]) (*connect.Response[v1.CreateUploadResponse], error)
	// GetUpload retrieves details for an existing upload session.
	GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error)
	// CompleteUpload finalizes an upload session and transitions the asset to processing.
	CompleteUpload(context.Context, *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error)
	// GetAsset returns details for a single managed asset.
	GetAsset(context.Context, *connect.Request[v1.GetAssetRequest]) (*connect.Response[v1.GetAssetResponse], error)
	// ListAssets returns a filtered, paginated collection of assets.
	ListAssets(context.Context, *connect.Request[v1.ListAssetsRequest]) (*connect.Response[v1.ListAssetsResponse], error)
	// UpdateAsset applies partial updates to an asset (e.g., change metadata).
	UpdateAsset(context.Context, *connect.Request[v1.UpdateAssetRequest]) (*connect.Response[v1.UpdateAssetResponse], error)
	// DeleteAsset archives or permanently deletes an asset.
	DeleteAsset(context.Context, *connect.Request[v1.DeleteAssetRequest]) (*connect.Response[v1.DeleteAssetResponse], error)
}

// NewAssetServiceClient constructs a client for the lession.v1.AssetService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAssetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AssetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	assetServiceMethods := v1.File_lession_v1_asset_service_proto.Services().ByName("AssetService").Methods()
	return &assetServiceClient{
		createUpload: connect.NewClient[v1.CreateUploadRequest, v1.CreateUploadResponse](
			httpClient,
			baseURL+AssetServiceCreateUploadProcedure,
			connect.WithSchema(assetServiceMethods.ByName("CreateUpload")),
			connect.WithClientOptions(opts...),
		),
		getUpload: connect.NewClient[v1.GetUploadRequest, v1.GetUploadResponse](
			httpClient,
			baseURL+AssetServiceGetUploadProcedure,
			connect.WithSchema(assetServiceMethods.ByName("GetUpload")),
			connect.WithClientOptions(opts...),
		),
		completeUpload: connect.NewClient[v1.CompleteUploadRequest, v1.CompleteUploadResponse](
			httpClient,
			baseURL+AssetServiceCompleteUploadProcedure,
			connect.WithSchema(assetServiceMethods.ByName("CompleteUpload")),
			connect.WithClientOptions(opts...),
		),
		getAsset: connect.NewClient[v1.GetAssetRequest, v1.GetAssetResponse](
			httpClient,
			baseURL+AssetServiceGetAssetProcedure,
			connect.WithSchema(assetServiceMethods.ByName("GetAsset")),
			connect.WithClientOptions(opts...),
		),
		listAssets: connect.NewClient[v1.ListAssetsRequest, v1.ListAssetsResponse](
			httpClient,
			baseURL+AssetServiceListAssetsProcedure,
			connect.WithSchema(assetServiceMethods.ByName("ListAssets")),
			connect.WithClientOptions(opts...),
		),
		updateAsset: connect.NewClient[v1.UpdateAssetRequest, v1.UpdateAssetResponse](
			httpClient,
			baseURL+AssetServiceUpdateAssetProcedure,
			connect.WithSchema(assetServiceMethods.ByName("UpdateAsset")),
			connect.WithClientOptions(opts...),
		),
		deleteAsset: connect.NewClient[v1.DeleteAssetRequest, v1.DeleteAssetResponse](
			httpClient,
			baseURL+AssetServiceDeleteAssetProcedure,
			connect.WithSchema(assetServiceMethods.ByName("DeleteAsset")),
			connect.WithClientOptions(opts...),
		),
	}
}

// assetServiceClient implements AssetServiceClient.
type assetServiceClient struct {
	createUpload   *connect.Client[v1.CreateUploadRequest, v1.CreateUploadResponse]
	getUpload      *connect.Client[v1.GetUploadRequest, v1.GetUploadResponse]
	completeUpload *connect.Client[v1.CompleteUploadRequest, v1.CompleteUploadResponse]
	getAsset       *connect.Client[v1.GetAssetRequest, v1.GetAssetResponse]
	listAssets     *connect.Client[v1.ListAssetsRequest, v1.ListAssetsResponse]
	updateAsset    *connect.Client[v1.UpdateAssetRequest, v1.UpdateAssetResponse]
	deleteAsset    *connect.Client[v1.DeleteAssetRequest, v1.DeleteAssetResponse]
}

// CreateUpload calls lession.v1.AssetService.CreateUpload.
func (c *assetServiceClient) CreateUpload(ctx context.Context, req *connect.Request[v1.CreateUploadRequest]) (*connect.Response[v1.CreateUploadResponse], error) {
	return c.createUpload.CallUnary(ctx, req)
}

// GetUpload calls lession.v1.AssetService.GetUpload.
func (c *assetServiceClient) GetUpload(ctx context.Context, req *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error) {
	return c.getUpload.CallUnary(ctx, req)
}

// CompleteUpload calls lession.v1.AssetService.CompleteUpload.
func (c *assetServiceClient) CompleteUpload(ctx context.Context, req *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error) {
	return c.completeUpload.CallUnary(ctx, req)
}

// GetAsset calls lession.v1.AssetService.GetAsset.
func (c *assetServiceClient) GetAsset(ctx context.Context, req *connect.Request[v1.GetAssetRequest]) (*connect.Response[v1.GetAssetResponse], error) {
	return c.getAsset.CallUnary(ctx, req)
}

// ListAssets calls lession.v1.AssetService.ListAssets.
func (c *assetServiceClient) ListAssets(ctx context.Context, req *connect.Request[v1.ListAssetsRequest]) (*connect.Response[v1.ListAssetsResponse], error) {
	return c.listAssets.CallUnary(ctx, req)
}

// UpdateAsset calls lession.v1.AssetService.UpdateAsset.
func (c *assetServiceClient) UpdateAsset(ctx context.Context, req *connect.Request[v1.UpdateAssetRequest]) (*connect.Response[v1.UpdateAssetResponse], error) {
	return c.updateAsset.CallUnary(ctx, req)
}

// DeleteAsset calls lession.v1.AssetService.DeleteAsset.
func (c *assetServiceClient) DeleteAsset(ctx context.Context, req *connect.Request[v1.DeleteAssetRequest]) (*connect.Response[v1.DeleteAssetResponse], error) {
	return c.deleteAsset.CallUnary(ctx, req)
}

// AssetServiceHandler is an implementation of the lession.v1.AssetService service.
type AssetServiceHandler interface {
	// CreateUpload establishes a new upload session and returns client instructions.
	CreateUpload(context.Context, *connect.Request[v1.CreateUploadRequest]) (*connect.Response[v1.CreateUploadResponse], error)
	// GetUpload retrieves details for an existing upload session.
	GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error)
	// CompleteUpload finalizes an upload session and transitions the asset to processing.
	CompleteUpload(context.Context, *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error)
	// GetAsset returns details for a single managed asset.
	GetAsset(context.Context, *connect.Request[v1.GetAssetRequest]) (*connect.Response[v1.GetAssetResponse], error)
	// ListAssets returns a filtered, paginated collection of assets.
	ListAssets(context.Context, *connect.Request[v1.ListAssetsRequest]) (*connect.Response[v1.ListAssetsResponse], error)
	// UpdateAsset applies partial updates to an asset (e.g., change metadata).
	UpdateAsset(context.Context, *connect.Request[v1.UpdateAssetRequest]) (*connect.Response[v1.UpdateAssetResponse], error)
	// DeleteAsset archives or permanently deletes an asset.
	DeleteAsset(context.Context, *connect.Request[v1.DeleteAssetRequest]) (*connect.Response[v1.DeleteAssetResponse], error)
}

// NewAssetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAssetServiceHandler(svc AssetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	assetServiceMethods := v1.File_lession_v1_asset_service_proto.Services().ByName("AssetService").Methods()
	assetServiceCreateUploadHandler := connect.NewUnaryHandler(
		AssetServiceCreateUploadProcedure,
		svc.CreateUpload,
		connect.WithSchema(assetServiceMethods.ByName("CreateUpload")),
		connect.WithHandlerOptions(opts...),
	)
	assetServiceGetUploadHandler := connect.NewUnaryHandler(
		AssetServiceGetUploadProcedure,
		svc.GetUpload,
		connect.WithSchema(assetServiceMethods.ByName("GetUpload")),
		connect.WithHandlerOptions(opts...),
	)
	assetServiceCompleteUploadHandler := connect.NewUnaryHandler(
		AssetServiceCompleteUploadProcedure,
		svc.CompleteUpload,
		connect.WithSchema(assetServiceMethods.ByName("CompleteUpload")),
		connect.WithHandlerOptions(opts...),
	)
	assetServiceGetAssetHandler := connect.NewUnaryHandler(
		AssetServiceGetAssetProcedure,
		svc.GetAsset,
		connect.WithSchema(assetServiceMethods.ByName("GetAsset")),
		connect.WithHandlerOptions(opts...),
	)
	assetServiceListAssetsHandler := connect.NewUnaryHandler(
		AssetServiceListAssetsProcedure,
		svc.ListAssets,
		connect.WithSchema(assetServiceMethods.ByName("ListAssets")),
		connect.WithHandlerOptions(opts...),
	)
	assetServiceUpdateAssetHandler := connect.NewUnaryHandler(
		AssetServiceUpdateAssetProcedure,
		svc.UpdateAsset,
		connect.WithSchema(assetServiceMethods.ByName("UpdateAsset")),
		connect.WithHandlerOptions(opts...),
	)
	assetServiceDeleteAssetHandler := connect.NewUnaryHandler(
		AssetServiceDeleteAssetProcedure,
		svc.DeleteAsset,
		connect.WithSchema(assetServiceMethods.ByName("DeleteAsset")),
		connect.WithHandlerOptions(opts...),
	)
	return "/lession.v1.AssetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AssetServiceCreateUploadProcedure:
			assetServiceCreateUploadHandler.ServeHTTP(w, r)
		case AssetServiceGetUploadProcedure:
			assetServiceGetUploadHandler.ServeHTTP(w, r)
		case AssetServiceCompleteUploadProcedure:
			assetServiceCompleteUploadHandler.ServeHTTP(w, r)
		case AssetServiceGetAssetProcedure:
			assetServiceGetAssetHandler.ServeHTTP(w, r)
		case AssetServiceListAssetsProcedure:
			assetServiceListAssetsHandler.ServeHTTP(w, r)
		case AssetServiceUpdateAssetProcedure:
			assetServiceUpdateAssetHandler.ServeHTTP(w, r)
		case AssetServiceDeleteAssetProcedure:
			assetServiceDeleteAssetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAssetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAssetServiceHandler struct{}

func (UnimplementedAssetServiceHandler) CreateUpload(context.Context, *connect.Request[v1.CreateUploadRequest]) (*connect.Response[v1.CreateUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.AssetService.CreateUpload is not implemented"))
}

func (UnimplementedAssetServiceHandler) GetUpload(context.Context, *connect.Request[v1.GetUploadRequest]) (*connect.Response[v1.GetUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.AssetService.GetUpload is not implemented"))
}

func (UnimplementedAssetServiceHandler) CompleteUpload(context.Context, *connect.Request[v1.CompleteUploadRequest]) (*connect.Response[v1.CompleteUploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.AssetService.CompleteUpload is not implemented"))
}

func (UnimplementedAssetServiceHandler) GetAsset(context.Context, *connect.Request[v1.GetAssetRequest]) (*connect.Response[v1.GetAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.AssetService.GetAsset is not implemented"))
}

func (UnimplementedAssetServiceHandler) ListAssets(context.Context, *connect.Request[v1.ListAssetsRequest]) (*connect.Response[v1.ListAssetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.AssetService.ListAssets is not implemented"))
}

func (UnimplementedAssetServiceHandler) UpdateAsset(context.Context, *connect.Request[v1.UpdateAssetRequest]) (*connect.Response[v1.UpdateAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.AssetService.UpdateAsset is not implemented"))
}

func (UnimplementedAssetServiceHandler) DeleteAsset(context.Context, *connect.Request[v1.DeleteAssetRequest]) (*connect.Response[v1.DeleteAssetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.AssetService.DeleteAsset is not implemented"))
}
