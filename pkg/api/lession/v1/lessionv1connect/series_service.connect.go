// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lession/v1/series_service.proto

package lessionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/eslsoft/lession/pkg/api/lession/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SeriesServiceName is the fully-qualified name of the SeriesService service.
	SeriesServiceName = "lession.v1.SeriesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SeriesServiceListSeriesProcedure is the fully-qualified name of the SeriesService's ListSeries
	// RPC.
	SeriesServiceListSeriesProcedure = "/lession.v1.SeriesService/ListSeries"
	// SeriesServiceCreateSeriesProcedure is the fully-qualified name of the SeriesService's
	// CreateSeries RPC.
	SeriesServiceCreateSeriesProcedure = "/lession.v1.SeriesService/CreateSeries"
	// SeriesServiceGetSeriesProcedure is the fully-qualified name of the SeriesService's GetSeries RPC.
	SeriesServiceGetSeriesProcedure = "/lession.v1.SeriesService/GetSeries"
	// SeriesServiceUpdateSeriesProcedure is the fully-qualified name of the SeriesService's
	// UpdateSeries RPC.
	SeriesServiceUpdateSeriesProcedure = "/lession.v1.SeriesService/UpdateSeries"
	// SeriesServiceCreateEpisodeProcedure is the fully-qualified name of the SeriesService's
	// CreateEpisode RPC.
	SeriesServiceCreateEpisodeProcedure = "/lession.v1.SeriesService/CreateEpisode"
	// SeriesServiceGetEpisodeProcedure is the fully-qualified name of the SeriesService's GetEpisode
	// RPC.
	SeriesServiceGetEpisodeProcedure = "/lession.v1.SeriesService/GetEpisode"
	// SeriesServiceUpdateEpisodeProcedure is the fully-qualified name of the SeriesService's
	// UpdateEpisode RPC.
	SeriesServiceUpdateEpisodeProcedure = "/lession.v1.SeriesService/UpdateEpisode"
	// SeriesServiceDeleteEpisodeProcedure is the fully-qualified name of the SeriesService's
	// DeleteEpisode RPC.
	SeriesServiceDeleteEpisodeProcedure = "/lession.v1.SeriesService/DeleteEpisode"
)

// SeriesServiceClient is a client for the lession.v1.SeriesService service.
type SeriesServiceClient interface {
	// ListSeries returns a filtered, paginated collection of series.
	ListSeries(context.Context, *connect.Request[v1.ListSeriesRequest]) (*connect.Response[v1.ListSeriesResponse], error)
	// CreateSeries creates a series and optional initial episodes.
	CreateSeries(context.Context, *connect.Request[v1.CreateSeriesRequest]) (*connect.Response[v1.CreateSeriesResponse], error)
	// GetSeries returns details for a single series.
	GetSeries(context.Context, *connect.Request[v1.GetSeriesRequest]) (*connect.Response[v1.GetSeriesResponse], error)
	// UpdateSeries applies partial updates to a series.
	UpdateSeries(context.Context, *connect.Request[v1.UpdateSeriesRequest]) (*connect.Response[v1.UpdateSeriesResponse], error)
	// CreateEpisode adds a new episode to an existing series.
	CreateEpisode(context.Context, *connect.Request[v1.CreateEpisodeRequest]) (*connect.Response[v1.CreateEpisodeResponse], error)
	// GetEpisode returns details for a single episode.
	GetEpisode(context.Context, *connect.Request[v1.GetEpisodeRequest]) (*connect.Response[v1.GetEpisodeResponse], error)
	// UpdateEpisode applies partial updates to an episode.
	UpdateEpisode(context.Context, *connect.Request[v1.UpdateEpisodeRequest]) (*connect.Response[v1.UpdateEpisodeResponse], error)
	// DeleteEpisode performs a soft delete of an episode.
	DeleteEpisode(context.Context, *connect.Request[v1.DeleteEpisodeRequest]) (*connect.Response[v1.DeleteEpisodeResponse], error)
}

// NewSeriesServiceClient constructs a client for the lession.v1.SeriesService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSeriesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SeriesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	seriesServiceMethods := v1.File_lession_v1_series_service_proto.Services().ByName("SeriesService").Methods()
	return &seriesServiceClient{
		listSeries: connect.NewClient[v1.ListSeriesRequest, v1.ListSeriesResponse](
			httpClient,
			baseURL+SeriesServiceListSeriesProcedure,
			connect.WithSchema(seriesServiceMethods.ByName("ListSeries")),
			connect.WithClientOptions(opts...),
		),
		createSeries: connect.NewClient[v1.CreateSeriesRequest, v1.CreateSeriesResponse](
			httpClient,
			baseURL+SeriesServiceCreateSeriesProcedure,
			connect.WithSchema(seriesServiceMethods.ByName("CreateSeries")),
			connect.WithClientOptions(opts...),
		),
		getSeries: connect.NewClient[v1.GetSeriesRequest, v1.GetSeriesResponse](
			httpClient,
			baseURL+SeriesServiceGetSeriesProcedure,
			connect.WithSchema(seriesServiceMethods.ByName("GetSeries")),
			connect.WithClientOptions(opts...),
		),
		updateSeries: connect.NewClient[v1.UpdateSeriesRequest, v1.UpdateSeriesResponse](
			httpClient,
			baseURL+SeriesServiceUpdateSeriesProcedure,
			connect.WithSchema(seriesServiceMethods.ByName("UpdateSeries")),
			connect.WithClientOptions(opts...),
		),
		createEpisode: connect.NewClient[v1.CreateEpisodeRequest, v1.CreateEpisodeResponse](
			httpClient,
			baseURL+SeriesServiceCreateEpisodeProcedure,
			connect.WithSchema(seriesServiceMethods.ByName("CreateEpisode")),
			connect.WithClientOptions(opts...),
		),
		getEpisode: connect.NewClient[v1.GetEpisodeRequest, v1.GetEpisodeResponse](
			httpClient,
			baseURL+SeriesServiceGetEpisodeProcedure,
			connect.WithSchema(seriesServiceMethods.ByName("GetEpisode")),
			connect.WithClientOptions(opts...),
		),
		updateEpisode: connect.NewClient[v1.UpdateEpisodeRequest, v1.UpdateEpisodeResponse](
			httpClient,
			baseURL+SeriesServiceUpdateEpisodeProcedure,
			connect.WithSchema(seriesServiceMethods.ByName("UpdateEpisode")),
			connect.WithClientOptions(opts...),
		),
		deleteEpisode: connect.NewClient[v1.DeleteEpisodeRequest, v1.DeleteEpisodeResponse](
			httpClient,
			baseURL+SeriesServiceDeleteEpisodeProcedure,
			connect.WithSchema(seriesServiceMethods.ByName("DeleteEpisode")),
			connect.WithClientOptions(opts...),
		),
	}
}

// seriesServiceClient implements SeriesServiceClient.
type seriesServiceClient struct {
	listSeries    *connect.Client[v1.ListSeriesRequest, v1.ListSeriesResponse]
	createSeries  *connect.Client[v1.CreateSeriesRequest, v1.CreateSeriesResponse]
	getSeries     *connect.Client[v1.GetSeriesRequest, v1.GetSeriesResponse]
	updateSeries  *connect.Client[v1.UpdateSeriesRequest, v1.UpdateSeriesResponse]
	createEpisode *connect.Client[v1.CreateEpisodeRequest, v1.CreateEpisodeResponse]
	getEpisode    *connect.Client[v1.GetEpisodeRequest, v1.GetEpisodeResponse]
	updateEpisode *connect.Client[v1.UpdateEpisodeRequest, v1.UpdateEpisodeResponse]
	deleteEpisode *connect.Client[v1.DeleteEpisodeRequest, v1.DeleteEpisodeResponse]
}

// ListSeries calls lession.v1.SeriesService.ListSeries.
func (c *seriesServiceClient) ListSeries(ctx context.Context, req *connect.Request[v1.ListSeriesRequest]) (*connect.Response[v1.ListSeriesResponse], error) {
	return c.listSeries.CallUnary(ctx, req)
}

// CreateSeries calls lession.v1.SeriesService.CreateSeries.
func (c *seriesServiceClient) CreateSeries(ctx context.Context, req *connect.Request[v1.CreateSeriesRequest]) (*connect.Response[v1.CreateSeriesResponse], error) {
	return c.createSeries.CallUnary(ctx, req)
}

// GetSeries calls lession.v1.SeriesService.GetSeries.
func (c *seriesServiceClient) GetSeries(ctx context.Context, req *connect.Request[v1.GetSeriesRequest]) (*connect.Response[v1.GetSeriesResponse], error) {
	return c.getSeries.CallUnary(ctx, req)
}

// UpdateSeries calls lession.v1.SeriesService.UpdateSeries.
func (c *seriesServiceClient) UpdateSeries(ctx context.Context, req *connect.Request[v1.UpdateSeriesRequest]) (*connect.Response[v1.UpdateSeriesResponse], error) {
	return c.updateSeries.CallUnary(ctx, req)
}

// CreateEpisode calls lession.v1.SeriesService.CreateEpisode.
func (c *seriesServiceClient) CreateEpisode(ctx context.Context, req *connect.Request[v1.CreateEpisodeRequest]) (*connect.Response[v1.CreateEpisodeResponse], error) {
	return c.createEpisode.CallUnary(ctx, req)
}

// GetEpisode calls lession.v1.SeriesService.GetEpisode.
func (c *seriesServiceClient) GetEpisode(ctx context.Context, req *connect.Request[v1.GetEpisodeRequest]) (*connect.Response[v1.GetEpisodeResponse], error) {
	return c.getEpisode.CallUnary(ctx, req)
}

// UpdateEpisode calls lession.v1.SeriesService.UpdateEpisode.
func (c *seriesServiceClient) UpdateEpisode(ctx context.Context, req *connect.Request[v1.UpdateEpisodeRequest]) (*connect.Response[v1.UpdateEpisodeResponse], error) {
	return c.updateEpisode.CallUnary(ctx, req)
}

// DeleteEpisode calls lession.v1.SeriesService.DeleteEpisode.
func (c *seriesServiceClient) DeleteEpisode(ctx context.Context, req *connect.Request[v1.DeleteEpisodeRequest]) (*connect.Response[v1.DeleteEpisodeResponse], error) {
	return c.deleteEpisode.CallUnary(ctx, req)
}

// SeriesServiceHandler is an implementation of the lession.v1.SeriesService service.
type SeriesServiceHandler interface {
	// ListSeries returns a filtered, paginated collection of series.
	ListSeries(context.Context, *connect.Request[v1.ListSeriesRequest]) (*connect.Response[v1.ListSeriesResponse], error)
	// CreateSeries creates a series and optional initial episodes.
	CreateSeries(context.Context, *connect.Request[v1.CreateSeriesRequest]) (*connect.Response[v1.CreateSeriesResponse], error)
	// GetSeries returns details for a single series.
	GetSeries(context.Context, *connect.Request[v1.GetSeriesRequest]) (*connect.Response[v1.GetSeriesResponse], error)
	// UpdateSeries applies partial updates to a series.
	UpdateSeries(context.Context, *connect.Request[v1.UpdateSeriesRequest]) (*connect.Response[v1.UpdateSeriesResponse], error)
	// CreateEpisode adds a new episode to an existing series.
	CreateEpisode(context.Context, *connect.Request[v1.CreateEpisodeRequest]) (*connect.Response[v1.CreateEpisodeResponse], error)
	// GetEpisode returns details for a single episode.
	GetEpisode(context.Context, *connect.Request[v1.GetEpisodeRequest]) (*connect.Response[v1.GetEpisodeResponse], error)
	// UpdateEpisode applies partial updates to an episode.
	UpdateEpisode(context.Context, *connect.Request[v1.UpdateEpisodeRequest]) (*connect.Response[v1.UpdateEpisodeResponse], error)
	// DeleteEpisode performs a soft delete of an episode.
	DeleteEpisode(context.Context, *connect.Request[v1.DeleteEpisodeRequest]) (*connect.Response[v1.DeleteEpisodeResponse], error)
}

// NewSeriesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSeriesServiceHandler(svc SeriesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	seriesServiceMethods := v1.File_lession_v1_series_service_proto.Services().ByName("SeriesService").Methods()
	seriesServiceListSeriesHandler := connect.NewUnaryHandler(
		SeriesServiceListSeriesProcedure,
		svc.ListSeries,
		connect.WithSchema(seriesServiceMethods.ByName("ListSeries")),
		connect.WithHandlerOptions(opts...),
	)
	seriesServiceCreateSeriesHandler := connect.NewUnaryHandler(
		SeriesServiceCreateSeriesProcedure,
		svc.CreateSeries,
		connect.WithSchema(seriesServiceMethods.ByName("CreateSeries")),
		connect.WithHandlerOptions(opts...),
	)
	seriesServiceGetSeriesHandler := connect.NewUnaryHandler(
		SeriesServiceGetSeriesProcedure,
		svc.GetSeries,
		connect.WithSchema(seriesServiceMethods.ByName("GetSeries")),
		connect.WithHandlerOptions(opts...),
	)
	seriesServiceUpdateSeriesHandler := connect.NewUnaryHandler(
		SeriesServiceUpdateSeriesProcedure,
		svc.UpdateSeries,
		connect.WithSchema(seriesServiceMethods.ByName("UpdateSeries")),
		connect.WithHandlerOptions(opts...),
	)
	seriesServiceCreateEpisodeHandler := connect.NewUnaryHandler(
		SeriesServiceCreateEpisodeProcedure,
		svc.CreateEpisode,
		connect.WithSchema(seriesServiceMethods.ByName("CreateEpisode")),
		connect.WithHandlerOptions(opts...),
	)
	seriesServiceGetEpisodeHandler := connect.NewUnaryHandler(
		SeriesServiceGetEpisodeProcedure,
		svc.GetEpisode,
		connect.WithSchema(seriesServiceMethods.ByName("GetEpisode")),
		connect.WithHandlerOptions(opts...),
	)
	seriesServiceUpdateEpisodeHandler := connect.NewUnaryHandler(
		SeriesServiceUpdateEpisodeProcedure,
		svc.UpdateEpisode,
		connect.WithSchema(seriesServiceMethods.ByName("UpdateEpisode")),
		connect.WithHandlerOptions(opts...),
	)
	seriesServiceDeleteEpisodeHandler := connect.NewUnaryHandler(
		SeriesServiceDeleteEpisodeProcedure,
		svc.DeleteEpisode,
		connect.WithSchema(seriesServiceMethods.ByName("DeleteEpisode")),
		connect.WithHandlerOptions(opts...),
	)
	return "/lession.v1.SeriesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SeriesServiceListSeriesProcedure:
			seriesServiceListSeriesHandler.ServeHTTP(w, r)
		case SeriesServiceCreateSeriesProcedure:
			seriesServiceCreateSeriesHandler.ServeHTTP(w, r)
		case SeriesServiceGetSeriesProcedure:
			seriesServiceGetSeriesHandler.ServeHTTP(w, r)
		case SeriesServiceUpdateSeriesProcedure:
			seriesServiceUpdateSeriesHandler.ServeHTTP(w, r)
		case SeriesServiceCreateEpisodeProcedure:
			seriesServiceCreateEpisodeHandler.ServeHTTP(w, r)
		case SeriesServiceGetEpisodeProcedure:
			seriesServiceGetEpisodeHandler.ServeHTTP(w, r)
		case SeriesServiceUpdateEpisodeProcedure:
			seriesServiceUpdateEpisodeHandler.ServeHTTP(w, r)
		case SeriesServiceDeleteEpisodeProcedure:
			seriesServiceDeleteEpisodeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSeriesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSeriesServiceHandler struct{}

func (UnimplementedSeriesServiceHandler) ListSeries(context.Context, *connect.Request[v1.ListSeriesRequest]) (*connect.Response[v1.ListSeriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.SeriesService.ListSeries is not implemented"))
}

func (UnimplementedSeriesServiceHandler) CreateSeries(context.Context, *connect.Request[v1.CreateSeriesRequest]) (*connect.Response[v1.CreateSeriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.SeriesService.CreateSeries is not implemented"))
}

func (UnimplementedSeriesServiceHandler) GetSeries(context.Context, *connect.Request[v1.GetSeriesRequest]) (*connect.Response[v1.GetSeriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.SeriesService.GetSeries is not implemented"))
}

func (UnimplementedSeriesServiceHandler) UpdateSeries(context.Context, *connect.Request[v1.UpdateSeriesRequest]) (*connect.Response[v1.UpdateSeriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.SeriesService.UpdateSeries is not implemented"))
}

func (UnimplementedSeriesServiceHandler) CreateEpisode(context.Context, *connect.Request[v1.CreateEpisodeRequest]) (*connect.Response[v1.CreateEpisodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.SeriesService.CreateEpisode is not implemented"))
}

func (UnimplementedSeriesServiceHandler) GetEpisode(context.Context, *connect.Request[v1.GetEpisodeRequest]) (*connect.Response[v1.GetEpisodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.SeriesService.GetEpisode is not implemented"))
}

func (UnimplementedSeriesServiceHandler) UpdateEpisode(context.Context, *connect.Request[v1.UpdateEpisodeRequest]) (*connect.Response[v1.UpdateEpisodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.SeriesService.UpdateEpisode is not implemented"))
}

func (UnimplementedSeriesServiceHandler) DeleteEpisode(context.Context, *connect.Request[v1.DeleteEpisodeRequest]) (*connect.Response[v1.DeleteEpisodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lession.v1.SeriesService.DeleteEpisode is not implemented"))
}
