// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: lession/v1/asset.proto

package lessionv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AssetStatus enumerates lifecycle stages for assets.
type AssetStatus int32

const (
	// ASSET_STATUS_UNSPECIFIED is the default zero value.
	AssetStatus_ASSET_STATUS_UNSPECIFIED AssetStatus = 0
	// ASSET_STATUS_PENDING indicates the asset is awaiting upload completion.
	AssetStatus_ASSET_STATUS_PENDING AssetStatus = 1
	// ASSET_STATUS_PROCESSING indicates the asset is undergoing server-side processing.
	AssetStatus_ASSET_STATUS_PROCESSING AssetStatus = 2
	// ASSET_STATUS_READY indicates the asset is ready for playback.
	AssetStatus_ASSET_STATUS_READY AssetStatus = 3
	// ASSET_STATUS_FAILED indicates processing failed.
	AssetStatus_ASSET_STATUS_FAILED AssetStatus = 4
	// ASSET_STATUS_DELETED indicates the asset has been removed.
	AssetStatus_ASSET_STATUS_DELETED AssetStatus = 5
)

// Enum value maps for AssetStatus.
var (
	AssetStatus_name = map[int32]string{
		0: "ASSET_STATUS_UNSPECIFIED",
		1: "ASSET_STATUS_PENDING",
		2: "ASSET_STATUS_PROCESSING",
		3: "ASSET_STATUS_READY",
		4: "ASSET_STATUS_FAILED",
		5: "ASSET_STATUS_DELETED",
	}
	AssetStatus_value = map[string]int32{
		"ASSET_STATUS_UNSPECIFIED": 0,
		"ASSET_STATUS_PENDING":     1,
		"ASSET_STATUS_PROCESSING":  2,
		"ASSET_STATUS_READY":       3,
		"ASSET_STATUS_FAILED":      4,
		"ASSET_STATUS_DELETED":     5,
	}
)

func (x AssetStatus) Enum() *AssetStatus {
	p := new(AssetStatus)
	*p = x
	return p
}

func (x AssetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lession_v1_asset_proto_enumTypes[0].Descriptor()
}

func (AssetStatus) Type() protoreflect.EnumType {
	return &file_lession_v1_asset_proto_enumTypes[0]
}

func (x AssetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetStatus.Descriptor instead.
func (AssetStatus) EnumDescriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{0}
}

// UploadStatus enumerates lifecycle stages for upload sessions.
type UploadStatus int32

const (
	// UPLOAD_STATUS_UNSPECIFIED is the default zero value.
	UploadStatus_UPLOAD_STATUS_UNSPECIFIED UploadStatus = 0
	// UPLOAD_STATUS_AWAITING_UPLOAD indicates the session is ready for client upload.
	UploadStatus_UPLOAD_STATUS_AWAITING_UPLOAD UploadStatus = 1
	// UPLOAD_STATUS_UPLOADING indicates the client upload is currently in progress.
	UploadStatus_UPLOAD_STATUS_UPLOADING UploadStatus = 2
	// UPLOAD_STATUS_COMPLETED indicates the upload finished successfully.
	UploadStatus_UPLOAD_STATUS_COMPLETED UploadStatus = 3
	// UPLOAD_STATUS_EXPIRED indicates the session expired before completion.
	UploadStatus_UPLOAD_STATUS_EXPIRED UploadStatus = 4
	// UPLOAD_STATUS_FAILED indicates the upload failed and cannot be resumed.
	UploadStatus_UPLOAD_STATUS_FAILED UploadStatus = 5
)

// Enum value maps for UploadStatus.
var (
	UploadStatus_name = map[int32]string{
		0: "UPLOAD_STATUS_UNSPECIFIED",
		1: "UPLOAD_STATUS_AWAITING_UPLOAD",
		2: "UPLOAD_STATUS_UPLOADING",
		3: "UPLOAD_STATUS_COMPLETED",
		4: "UPLOAD_STATUS_EXPIRED",
		5: "UPLOAD_STATUS_FAILED",
	}
	UploadStatus_value = map[string]int32{
		"UPLOAD_STATUS_UNSPECIFIED":     0,
		"UPLOAD_STATUS_AWAITING_UPLOAD": 1,
		"UPLOAD_STATUS_UPLOADING":       2,
		"UPLOAD_STATUS_COMPLETED":       3,
		"UPLOAD_STATUS_EXPIRED":         4,
		"UPLOAD_STATUS_FAILED":          5,
	}
)

func (x UploadStatus) Enum() *UploadStatus {
	p := new(UploadStatus)
	*p = x
	return p
}

func (x UploadStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lession_v1_asset_proto_enumTypes[1].Descriptor()
}

func (UploadStatus) Type() protoreflect.EnumType {
	return &file_lession_v1_asset_proto_enumTypes[1]
}

func (x UploadStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadStatus.Descriptor instead.
func (UploadStatus) EnumDescriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{1}
}

// UploadProtocol enumerates supported client upload patterns.
type UploadProtocol int32

const (
	// UPLOAD_PROTOCOL_UNSPECIFIED is the default zero value.
	UploadProtocol_UPLOAD_PROTOCOL_UNSPECIFIED UploadProtocol = 0
	// UPLOAD_PROTOCOL_PRESIGNED_PUT indicates a single PUT request to a pre-signed URL.
	UploadProtocol_UPLOAD_PROTOCOL_PRESIGNED_PUT UploadProtocol = 1
	// UPLOAD_PROTOCOL_PRESIGNED_POST indicates an HTML form POST to a pre-signed URL.
	UploadProtocol_UPLOAD_PROTOCOL_PRESIGNED_POST UploadProtocol = 2
	// UPLOAD_PROTOCOL_MULTIPART indicates a multipart upload flow.
	UploadProtocol_UPLOAD_PROTOCOL_MULTIPART UploadProtocol = 3
)

// Enum value maps for UploadProtocol.
var (
	UploadProtocol_name = map[int32]string{
		0: "UPLOAD_PROTOCOL_UNSPECIFIED",
		1: "UPLOAD_PROTOCOL_PRESIGNED_PUT",
		2: "UPLOAD_PROTOCOL_PRESIGNED_POST",
		3: "UPLOAD_PROTOCOL_MULTIPART",
	}
	UploadProtocol_value = map[string]int32{
		"UPLOAD_PROTOCOL_UNSPECIFIED":    0,
		"UPLOAD_PROTOCOL_PRESIGNED_PUT":  1,
		"UPLOAD_PROTOCOL_PRESIGNED_POST": 2,
		"UPLOAD_PROTOCOL_MULTIPART":      3,
	}
)

func (x UploadProtocol) Enum() *UploadProtocol {
	p := new(UploadProtocol)
	*p = x
	return p
}

func (x UploadProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_lession_v1_asset_proto_enumTypes[2].Descriptor()
}

func (UploadProtocol) Type() protoreflect.EnumType {
	return &file_lession_v1_asset_proto_enumTypes[2]
}

func (x UploadProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadProtocol.Descriptor instead.
func (UploadProtocol) EnumDescriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{2}
}

// Asset represents a managed media object stored by the platform.
type Asset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id is the server-assigned identifier for the asset.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// asset_key links the asset to uploaded object storage content.
	AssetKey string `protobuf:"bytes,2,opt,name=asset_key,json=assetKey,proto3" json:"asset_key,omitempty"`
	// type classifies the asset content.
	Type MediaType `protobuf:"varint,3,opt,name=type,proto3,enum=lession.v1.MediaType" json:"type,omitempty"`
	// status tracks the lifecycle stage of the asset.
	Status AssetStatus `protobuf:"varint,4,opt,name=status,proto3,enum=lession.v1.AssetStatus" json:"status,omitempty"`
	// original_filename captures the client-supplied file name.
	OriginalFilename string `protobuf:"bytes,5,opt,name=original_filename,json=originalFilename,proto3" json:"original_filename,omitempty"`
	// mime_type conveys the content type for the source asset.
	MimeType string `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// filesize stores the size of the source asset in bytes.
	Filesize int64 `protobuf:"varint,7,opt,name=filesize,proto3" json:"filesize,omitempty"`
	// duration stores the detected media duration, if applicable.
	Duration *durationpb.Duration `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	// playback_url provides the public stream, populated when the asset is ready.
	PlaybackUrl string `protobuf:"bytes,9,opt,name=playback_url,json=playbackUrl,proto3" json:"playback_url,omitempty"`
	// created_at records when the asset was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at records when the asset was last modified.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// ready_at records when the asset became available for playback.
	ReadyAt       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=ready_at,json=readyAt,proto3" json:"ready_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Asset) Reset() {
	*x = Asset{}
	mi := &file_lession_v1_asset_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{0}
}

func (x *Asset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Asset) GetAssetKey() string {
	if x != nil {
		return x.AssetKey
	}
	return ""
}

func (x *Asset) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_MEDIA_TYPE_UNSPECIFIED
}

func (x *Asset) GetStatus() AssetStatus {
	if x != nil {
		return x.Status
	}
	return AssetStatus_ASSET_STATUS_UNSPECIFIED
}

func (x *Asset) GetOriginalFilename() string {
	if x != nil {
		return x.OriginalFilename
	}
	return ""
}

func (x *Asset) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Asset) GetFilesize() int64 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *Asset) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Asset) GetPlaybackUrl() string {
	if x != nil {
		return x.PlaybackUrl
	}
	return ""
}

func (x *Asset) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Asset) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Asset) GetReadyAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReadyAt
	}
	return nil
}

// UploadSession orchestrates client-side uploads into managed storage.
type UploadSession struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id is the server-assigned identifier for the upload session.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// asset_key links the upload session to the future asset record.
	AssetKey string `protobuf:"bytes,2,opt,name=asset_key,json=assetKey,proto3" json:"asset_key,omitempty"`
	// type classifies the asset to be uploaded.
	Type MediaType `protobuf:"varint,3,opt,name=type,proto3,enum=lession.v1.MediaType" json:"type,omitempty"`
	// protocol indicates the upload mechanism to use.
	Protocol UploadProtocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=lession.v1.UploadProtocol" json:"protocol,omitempty"`
	// status tracks the lifecycle stage of the upload.
	Status UploadStatus `protobuf:"varint,5,opt,name=status,proto3,enum=lession.v1.UploadStatus" json:"status,omitempty"`
	// target contains details needed for clients to perform the upload.
	Target *UploadTarget `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"`
	// original_filename captures the client-supplied file name.
	OriginalFilename string `protobuf:"bytes,7,opt,name=original_filename,json=originalFilename,proto3" json:"original_filename,omitempty"`
	// mime_type conveys the expected content type for the upload.
	MimeType string `protobuf:"bytes,8,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// content_length stores the expected size of the upload in bytes.
	ContentLength int64 `protobuf:"varint,9,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	// expires_at records when the upload session is no longer valid.
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// created_at records when the upload session was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_at records when the upload session was last modified.
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadSession) Reset() {
	*x = UploadSession{}
	mi := &file_lession_v1_asset_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSession) ProtoMessage() {}

func (x *UploadSession) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSession.ProtoReflect.Descriptor instead.
func (*UploadSession) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{1}
}

func (x *UploadSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UploadSession) GetAssetKey() string {
	if x != nil {
		return x.AssetKey
	}
	return ""
}

func (x *UploadSession) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_MEDIA_TYPE_UNSPECIFIED
}

func (x *UploadSession) GetProtocol() UploadProtocol {
	if x != nil {
		return x.Protocol
	}
	return UploadProtocol_UPLOAD_PROTOCOL_UNSPECIFIED
}

func (x *UploadSession) GetStatus() UploadStatus {
	if x != nil {
		return x.Status
	}
	return UploadStatus_UPLOAD_STATUS_UNSPECIFIED
}

func (x *UploadSession) GetTarget() *UploadTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *UploadSession) GetOriginalFilename() string {
	if x != nil {
		return x.OriginalFilename
	}
	return ""
}

func (x *UploadSession) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *UploadSession) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

func (x *UploadSession) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *UploadSession) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UploadSession) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// UploadTarget provides instructions for executing an upload.
type UploadTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// method is the HTTP method that should be used (e.g. PUT, POST).
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// url locates the upload endpoint.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// headers lists HTTP headers to include when uploading.
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// form_fields lists form values required for POST-based uploads.
	FormFields    map[string]string `protobuf:"bytes,4,rep,name=form_fields,json=formFields,proto3" json:"form_fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadTarget) Reset() {
	*x = UploadTarget{}
	mi := &file_lession_v1_asset_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadTarget) ProtoMessage() {}

func (x *UploadTarget) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadTarget.ProtoReflect.Descriptor instead.
func (*UploadTarget) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{2}
}

func (x *UploadTarget) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *UploadTarget) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UploadTarget) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *UploadTarget) GetFormFields() map[string]string {
	if x != nil {
		return x.FormFields
	}
	return nil
}

// CreateUploadRequest establishes a new upload session.
type CreateUploadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// type classifies the asset to be uploaded.
	Type MediaType `protobuf:"varint,1,opt,name=type,proto3,enum=lession.v1.MediaType" json:"type,omitempty"`
	// original_filename captures the client-supplied file name.
	OriginalFilename string `protobuf:"bytes,2,opt,name=original_filename,json=originalFilename,proto3" json:"original_filename,omitempty"`
	// mime_type conveys the expected content type for the upload.
	MimeType string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// content_length stores the expected size of the upload in bytes.
	ContentLength int64 `protobuf:"varint,4,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUploadRequest) Reset() {
	*x = CreateUploadRequest{}
	mi := &file_lession_v1_asset_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUploadRequest) ProtoMessage() {}

func (x *CreateUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUploadRequest.ProtoReflect.Descriptor instead.
func (*CreateUploadRequest) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{3}
}

func (x *CreateUploadRequest) GetType() MediaType {
	if x != nil {
		return x.Type
	}
	return MediaType_MEDIA_TYPE_UNSPECIFIED
}

func (x *CreateUploadRequest) GetOriginalFilename() string {
	if x != nil {
		return x.OriginalFilename
	}
	return ""
}

func (x *CreateUploadRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *CreateUploadRequest) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

// CreateUploadResponse returns an upload session with instructions.
type CreateUploadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// upload contains details required to perform the upload.
	Upload        *UploadSession `protobuf:"bytes,1,opt,name=upload,proto3" json:"upload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUploadResponse) Reset() {
	*x = CreateUploadResponse{}
	mi := &file_lession_v1_asset_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUploadResponse) ProtoMessage() {}

func (x *CreateUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUploadResponse.ProtoReflect.Descriptor instead.
func (*CreateUploadResponse) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{4}
}

func (x *CreateUploadResponse) GetUpload() *UploadSession {
	if x != nil {
		return x.Upload
	}
	return nil
}

// GetUploadRequest retrieves details about an upload session.
type GetUploadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*GetUploadRequest_UploadId
	//	*GetUploadRequest_AssetKey
	Identifier    isGetUploadRequest_Identifier `protobuf_oneof:"identifier"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUploadRequest) Reset() {
	*x = GetUploadRequest{}
	mi := &file_lession_v1_asset_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadRequest) ProtoMessage() {}

func (x *GetUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadRequest.ProtoReflect.Descriptor instead.
func (*GetUploadRequest) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{5}
}

func (x *GetUploadRequest) GetIdentifier() isGetUploadRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetUploadRequest) GetUploadId() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetUploadRequest_UploadId); ok {
			return x.UploadId
		}
	}
	return ""
}

func (x *GetUploadRequest) GetAssetKey() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetUploadRequest_AssetKey); ok {
			return x.AssetKey
		}
	}
	return ""
}

type isGetUploadRequest_Identifier interface {
	isGetUploadRequest_Identifier()
}

type GetUploadRequest_UploadId struct {
	// upload_id directly references the upload session.
	UploadId string `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3,oneof"`
}

type GetUploadRequest_AssetKey struct {
	// asset_key references the upload session via its asset key.
	AssetKey string `protobuf:"bytes,2,opt,name=asset_key,json=assetKey,proto3,oneof"`
}

func (*GetUploadRequest_UploadId) isGetUploadRequest_Identifier() {}

func (*GetUploadRequest_AssetKey) isGetUploadRequest_Identifier() {}

// GetUploadResponse returns an upload session.
type GetUploadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// upload contains the requested session.
	Upload        *UploadSession `protobuf:"bytes,1,opt,name=upload,proto3" json:"upload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUploadResponse) Reset() {
	*x = GetUploadResponse{}
	mi := &file_lession_v1_asset_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadResponse) ProtoMessage() {}

func (x *GetUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadResponse.ProtoReflect.Descriptor instead.
func (*GetUploadResponse) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{6}
}

func (x *GetUploadResponse) GetUpload() *UploadSession {
	if x != nil {
		return x.Upload
	}
	return nil
}

// CompleteUploadRequest finalizes an upload session after client upload succeeds.
type CompleteUploadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*CompleteUploadRequest_UploadId
	//	*CompleteUploadRequest_AssetKey
	Identifier isCompleteUploadRequest_Identifier `protobuf_oneof:"identifier"`
	// checksum provides the computed hash of the uploaded content for validation.
	Checksum string `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// content_length stores the actual size of the uploaded content in bytes.
	ContentLength int64 `protobuf:"varint,4,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteUploadRequest) Reset() {
	*x = CompleteUploadRequest{}
	mi := &file_lession_v1_asset_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteUploadRequest) ProtoMessage() {}

func (x *CompleteUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteUploadRequest.ProtoReflect.Descriptor instead.
func (*CompleteUploadRequest) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{7}
}

func (x *CompleteUploadRequest) GetIdentifier() isCompleteUploadRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *CompleteUploadRequest) GetUploadId() string {
	if x != nil {
		if x, ok := x.Identifier.(*CompleteUploadRequest_UploadId); ok {
			return x.UploadId
		}
	}
	return ""
}

func (x *CompleteUploadRequest) GetAssetKey() string {
	if x != nil {
		if x, ok := x.Identifier.(*CompleteUploadRequest_AssetKey); ok {
			return x.AssetKey
		}
	}
	return ""
}

func (x *CompleteUploadRequest) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

func (x *CompleteUploadRequest) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

type isCompleteUploadRequest_Identifier interface {
	isCompleteUploadRequest_Identifier()
}

type CompleteUploadRequest_UploadId struct {
	// upload_id directly references the upload session.
	UploadId string `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3,oneof"`
}

type CompleteUploadRequest_AssetKey struct {
	// asset_key references the upload session via its asset key.
	AssetKey string `protobuf:"bytes,2,opt,name=asset_key,json=assetKey,proto3,oneof"`
}

func (*CompleteUploadRequest_UploadId) isCompleteUploadRequest_Identifier() {}

func (*CompleteUploadRequest_AssetKey) isCompleteUploadRequest_Identifier() {}

// CompleteUploadResponse returns the finalized asset and upload session.
type CompleteUploadResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// asset is the managed asset record created from the upload.
	Asset *Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	// upload contains the completed upload session.
	Upload        *UploadSession `protobuf:"bytes,2,opt,name=upload,proto3" json:"upload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteUploadResponse) Reset() {
	*x = CompleteUploadResponse{}
	mi := &file_lession_v1_asset_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteUploadResponse) ProtoMessage() {}

func (x *CompleteUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteUploadResponse.ProtoReflect.Descriptor instead.
func (*CompleteUploadResponse) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{8}
}

func (x *CompleteUploadResponse) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *CompleteUploadResponse) GetUpload() *UploadSession {
	if x != nil {
		return x.Upload
	}
	return nil
}

// GetAssetRequest retrieves details about a managed asset.
type GetAssetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Identifier:
	//
	//	*GetAssetRequest_AssetId
	//	*GetAssetRequest_AssetKey
	Identifier    isGetAssetRequest_Identifier `protobuf_oneof:"identifier"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAssetRequest) Reset() {
	*x = GetAssetRequest{}
	mi := &file_lession_v1_asset_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetRequest) ProtoMessage() {}

func (x *GetAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetRequest.ProtoReflect.Descriptor instead.
func (*GetAssetRequest) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{9}
}

func (x *GetAssetRequest) GetIdentifier() isGetAssetRequest_Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *GetAssetRequest) GetAssetId() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetAssetRequest_AssetId); ok {
			return x.AssetId
		}
	}
	return ""
}

func (x *GetAssetRequest) GetAssetKey() string {
	if x != nil {
		if x, ok := x.Identifier.(*GetAssetRequest_AssetKey); ok {
			return x.AssetKey
		}
	}
	return ""
}

type isGetAssetRequest_Identifier interface {
	isGetAssetRequest_Identifier()
}

type GetAssetRequest_AssetId struct {
	// asset_id directly references the asset.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

type GetAssetRequest_AssetKey struct {
	// asset_key references the asset via its storage key.
	AssetKey string `protobuf:"bytes,2,opt,name=asset_key,json=assetKey,proto3,oneof"`
}

func (*GetAssetRequest_AssetId) isGetAssetRequest_Identifier() {}

func (*GetAssetRequest_AssetKey) isGetAssetRequest_Identifier() {}

// GetAssetResponse returns a managed asset.
type GetAssetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// asset contains the requested record.
	Asset         *Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAssetResponse) Reset() {
	*x = GetAssetResponse{}
	mi := &file_lession_v1_asset_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetResponse) ProtoMessage() {}

func (x *GetAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetResponse.ProtoReflect.Descriptor instead.
func (*GetAssetResponse) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{10}
}

func (x *GetAssetResponse) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

// ListAssetsRequest requests a filtered page of assets.
type ListAssetsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// page_size limits the number of returned assets.
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// page_token continues a prior ListAssets response.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// statuses filters assets by lifecycle state.
	Statuses []AssetStatus `protobuf:"varint,3,rep,packed,name=statuses,proto3,enum=lession.v1.AssetStatus" json:"statuses,omitempty"`
	// types filters assets by media type.
	Types []MediaType `protobuf:"varint,4,rep,packed,name=types,proto3,enum=lession.v1.MediaType" json:"types,omitempty"`
	// asset_keys filters assets matching any of the supplied storage keys.
	AssetKeys     []string `protobuf:"bytes,5,rep,name=asset_keys,json=assetKeys,proto3" json:"asset_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAssetsRequest) Reset() {
	*x = ListAssetsRequest{}
	mi := &file_lession_v1_asset_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetsRequest) ProtoMessage() {}

func (x *ListAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetsRequest.ProtoReflect.Descriptor instead.
func (*ListAssetsRequest) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{11}
}

func (x *ListAssetsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAssetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListAssetsRequest) GetStatuses() []AssetStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListAssetsRequest) GetTypes() []MediaType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListAssetsRequest) GetAssetKeys() []string {
	if x != nil {
		return x.AssetKeys
	}
	return nil
}

// ListAssetsResponse returns a page of assets.
type ListAssetsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// assets contains the requested page of asset resources.
	Assets []*Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
	// next_page_token is supplied when more data is available.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAssetsResponse) Reset() {
	*x = ListAssetsResponse{}
	mi := &file_lession_v1_asset_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetsResponse) ProtoMessage() {}

func (x *ListAssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetsResponse.ProtoReflect.Descriptor instead.
func (*ListAssetsResponse) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{12}
}

func (x *ListAssetsResponse) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ListAssetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// DeleteAssetRequest archives or deletes an asset.
type DeleteAssetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// asset_id references the target asset.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// hard_delete requests permanent deletion instead of archival.
	HardDelete    bool `protobuf:"varint,2,opt,name=hard_delete,json=hardDelete,proto3" json:"hard_delete,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAssetRequest) Reset() {
	*x = DeleteAssetRequest{}
	mi := &file_lession_v1_asset_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssetRequest) ProtoMessage() {}

func (x *DeleteAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssetRequest.ProtoReflect.Descriptor instead.
func (*DeleteAssetRequest) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteAssetRequest) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *DeleteAssetRequest) GetHardDelete() bool {
	if x != nil {
		return x.HardDelete
	}
	return false
}

// DeleteAssetResponse returns the asset state after deletion.
type DeleteAssetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// asset is the asset after deletion or archival.
	Asset         *Asset `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAssetResponse) Reset() {
	*x = DeleteAssetResponse{}
	mi := &file_lession_v1_asset_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAssetResponse) ProtoMessage() {}

func (x *DeleteAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lession_v1_asset_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAssetResponse.ProtoReflect.Descriptor instead.
func (*DeleteAssetResponse) Descriptor() ([]byte, []int) {
	return file_lession_v1_asset_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteAssetResponse) GetAsset() *Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

var File_lession_v1_asset_proto protoreflect.FileDescriptor

const file_lession_v1_asset_proto_rawDesc = "" +
	"\n" +
	"\x16lession/v1/asset.proto\x12\n" +
	"lession.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x17lession/v1/series.proto\"\xfd\x03\n" +
	"\x05Asset\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tasset_key\x18\x02 \x01(\tR\bassetKey\x12)\n" +
	"\x04type\x18\x03 \x01(\x0e2\x15.lession.v1.MediaTypeR\x04type\x12/\n" +
	"\x06status\x18\x04 \x01(\x0e2\x17.lession.v1.AssetStatusR\x06status\x12+\n" +
	"\x11original_filename\x18\x05 \x01(\tR\x10originalFilename\x12\x1b\n" +
	"\tmime_type\x18\x06 \x01(\tR\bmimeType\x12\x1a\n" +
	"\bfilesize\x18\a \x01(\x03R\bfilesize\x125\n" +
	"\bduration\x18\b \x01(\v2\x19.google.protobuf.DurationR\bduration\x12!\n" +
	"\fplayback_url\x18\t \x01(\tR\vplaybackUrl\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x125\n" +
	"\bready_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\areadyAt\"\xa5\x04\n" +
	"\rUploadSession\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tasset_key\x18\x02 \x01(\tR\bassetKey\x12)\n" +
	"\x04type\x18\x03 \x01(\x0e2\x15.lession.v1.MediaTypeR\x04type\x126\n" +
	"\bprotocol\x18\x04 \x01(\x0e2\x1a.lession.v1.UploadProtocolR\bprotocol\x120\n" +
	"\x06status\x18\x05 \x01(\x0e2\x18.lession.v1.UploadStatusR\x06status\x120\n" +
	"\x06target\x18\x06 \x01(\v2\x18.lession.v1.UploadTargetR\x06target\x12+\n" +
	"\x11original_filename\x18\a \x01(\tR\x10originalFilename\x12\x1b\n" +
	"\tmime_type\x18\b \x01(\tR\bmimeType\x12%\n" +
	"\x0econtent_length\x18\t \x01(\x03R\rcontentLength\x129\n" +
	"\n" +
	"expires_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\texpiresAt\x129\n" +
	"\n" +
	"created_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\"\xbf\x02\n" +
	"\fUploadTarget\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12?\n" +
	"\aheaders\x18\x03 \x03(\v2%.lession.v1.UploadTarget.HeadersEntryR\aheaders\x12I\n" +
	"\vform_fields\x18\x04 \x03(\v2(.lession.v1.UploadTarget.FormFieldsEntryR\n" +
	"formFields\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fFormFieldsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xde\x01\n" +
	"\x13CreateUploadRequest\x125\n" +
	"\x04type\x18\x01 \x01(\x0e2\x15.lession.v1.MediaTypeB\n" +
	"\xbaH\a\x82\x01\x04\x10\x01 \x00R\x04type\x127\n" +
	"\x11original_filename\x18\x02 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\x80\x04R\x10originalFilename\x12'\n" +
	"\tmime_type\x18\x03 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\x80\x02R\bmimeType\x12.\n" +
	"\x0econtent_length\x18\x04 \x01(\x03B\a\xbaH\x04\"\x02(\x00R\rcontentLength\"I\n" +
	"\x14CreateUploadResponse\x121\n" +
	"\x06upload\x18\x01 \x01(\v2\x19.lession.v1.UploadSessionR\x06upload\"x\n" +
	"\x10GetUploadRequest\x12'\n" +
	"\tupload_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x00R\buploadId\x12&\n" +
	"\tasset_key\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01H\x00R\bassetKeyB\x13\n" +
	"\n" +
	"identifier\x12\x05\xbaH\x02\b\x01\"F\n" +
	"\x11GetUploadResponse\x121\n" +
	"\x06upload\x18\x01 \x01(\v2\x19.lession.v1.UploadSessionR\x06upload\"\xd3\x01\n" +
	"\x15CompleteUploadRequest\x12'\n" +
	"\tupload_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x00R\buploadId\x12&\n" +
	"\tasset_key\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01H\x00R\bassetKey\x12$\n" +
	"\bchecksum\x18\x03 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x02R\bchecksum\x12.\n" +
	"\x0econtent_length\x18\x04 \x01(\x03B\a\xbaH\x04\"\x02(\x00R\rcontentLengthB\x13\n" +
	"\n" +
	"identifier\x12\x05\xbaH\x02\b\x01\"t\n" +
	"\x16CompleteUploadResponse\x12'\n" +
	"\x05asset\x18\x01 \x01(\v2\x11.lession.v1.AssetR\x05asset\x121\n" +
	"\x06upload\x18\x02 \x01(\v2\x19.lession.v1.UploadSessionR\x06upload\"u\n" +
	"\x0fGetAssetRequest\x12%\n" +
	"\basset_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01H\x00R\aassetId\x12&\n" +
	"\tasset_key\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01H\x00R\bassetKeyB\x13\n" +
	"\n" +
	"identifier\x12\x05\xbaH\x02\b\x01\";\n" +
	"\x10GetAssetResponse\x12'\n" +
	"\x05asset\x18\x01 \x01(\v2\x11.lession.v1.AssetR\x05asset\"\xfc\x01\n" +
	"\x11ListAssetsRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\rR\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12B\n" +
	"\bstatuses\x18\x03 \x03(\x0e2\x17.lession.v1.AssetStatusB\r\xbaH\n" +
	"\x92\x01\a\"\x05\x82\x01\x02\x10\x01R\bstatuses\x12:\n" +
	"\x05types\x18\x04 \x03(\x0e2\x15.lession.v1.MediaTypeB\r\xbaH\n" +
	"\x92\x01\a\"\x05\x82\x01\x02\x10\x01R\x05types\x12+\n" +
	"\n" +
	"asset_keys\x18\x05 \x03(\tB\f\xbaH\t\x92\x01\x06\"\x04r\x02\x10\x01R\tassetKeys\"g\n" +
	"\x12ListAssetsResponse\x12)\n" +
	"\x06assets\x18\x01 \x03(\v2\x11.lession.v1.AssetR\x06assets\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"Z\n" +
	"\x12DeleteAssetRequest\x12#\n" +
	"\basset_id\x18\x01 \x01(\tB\b\xbaH\x05r\x03\xb0\x01\x01R\aassetId\x12\x1f\n" +
	"\vhard_delete\x18\x02 \x01(\bR\n" +
	"hardDelete\">\n" +
	"\x13DeleteAssetResponse\x12'\n" +
	"\x05asset\x18\x01 \x01(\v2\x11.lession.v1.AssetR\x05asset*\xad\x01\n" +
	"\vAssetStatus\x12\x1c\n" +
	"\x18ASSET_STATUS_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14ASSET_STATUS_PENDING\x10\x01\x12\x1b\n" +
	"\x17ASSET_STATUS_PROCESSING\x10\x02\x12\x16\n" +
	"\x12ASSET_STATUS_READY\x10\x03\x12\x17\n" +
	"\x13ASSET_STATUS_FAILED\x10\x04\x12\x18\n" +
	"\x14ASSET_STATUS_DELETED\x10\x05*\xbf\x01\n" +
	"\fUploadStatus\x12\x1d\n" +
	"\x19UPLOAD_STATUS_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dUPLOAD_STATUS_AWAITING_UPLOAD\x10\x01\x12\x1b\n" +
	"\x17UPLOAD_STATUS_UPLOADING\x10\x02\x12\x1b\n" +
	"\x17UPLOAD_STATUS_COMPLETED\x10\x03\x12\x19\n" +
	"\x15UPLOAD_STATUS_EXPIRED\x10\x04\x12\x18\n" +
	"\x14UPLOAD_STATUS_FAILED\x10\x05*\x97\x01\n" +
	"\x0eUploadProtocol\x12\x1f\n" +
	"\x1bUPLOAD_PROTOCOL_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dUPLOAD_PROTOCOL_PRESIGNED_PUT\x10\x01\x12\"\n" +
	"\x1eUPLOAD_PROTOCOL_PRESIGNED_POST\x10\x02\x12\x1d\n" +
	"\x19UPLOAD_PROTOCOL_MULTIPART\x10\x03B9Z7github.com/eslsoft/lession/pkg/api/lession/v1;lessionv1b\x06proto3"

var (
	file_lession_v1_asset_proto_rawDescOnce sync.Once
	file_lession_v1_asset_proto_rawDescData []byte
)

func file_lession_v1_asset_proto_rawDescGZIP() []byte {
	file_lession_v1_asset_proto_rawDescOnce.Do(func() {
		file_lession_v1_asset_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_lession_v1_asset_proto_rawDesc), len(file_lession_v1_asset_proto_rawDesc)))
	})
	return file_lession_v1_asset_proto_rawDescData
}

var file_lession_v1_asset_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_lession_v1_asset_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_lession_v1_asset_proto_goTypes = []any{
	(AssetStatus)(0),               // 0: lession.v1.AssetStatus
	(UploadStatus)(0),              // 1: lession.v1.UploadStatus
	(UploadProtocol)(0),            // 2: lession.v1.UploadProtocol
	(*Asset)(nil),                  // 3: lession.v1.Asset
	(*UploadSession)(nil),          // 4: lession.v1.UploadSession
	(*UploadTarget)(nil),           // 5: lession.v1.UploadTarget
	(*CreateUploadRequest)(nil),    // 6: lession.v1.CreateUploadRequest
	(*CreateUploadResponse)(nil),   // 7: lession.v1.CreateUploadResponse
	(*GetUploadRequest)(nil),       // 8: lession.v1.GetUploadRequest
	(*GetUploadResponse)(nil),      // 9: lession.v1.GetUploadResponse
	(*CompleteUploadRequest)(nil),  // 10: lession.v1.CompleteUploadRequest
	(*CompleteUploadResponse)(nil), // 11: lession.v1.CompleteUploadResponse
	(*GetAssetRequest)(nil),        // 12: lession.v1.GetAssetRequest
	(*GetAssetResponse)(nil),       // 13: lession.v1.GetAssetResponse
	(*ListAssetsRequest)(nil),      // 14: lession.v1.ListAssetsRequest
	(*ListAssetsResponse)(nil),     // 15: lession.v1.ListAssetsResponse
	(*DeleteAssetRequest)(nil),     // 16: lession.v1.DeleteAssetRequest
	(*DeleteAssetResponse)(nil),    // 17: lession.v1.DeleteAssetResponse
	nil,                            // 18: lession.v1.UploadTarget.HeadersEntry
	nil,                            // 19: lession.v1.UploadTarget.FormFieldsEntry
	(MediaType)(0),                 // 20: lession.v1.MediaType
	(*durationpb.Duration)(nil),    // 21: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),  // 22: google.protobuf.Timestamp
}
var file_lession_v1_asset_proto_depIdxs = []int32{
	20, // 0: lession.v1.Asset.type:type_name -> lession.v1.MediaType
	0,  // 1: lession.v1.Asset.status:type_name -> lession.v1.AssetStatus
	21, // 2: lession.v1.Asset.duration:type_name -> google.protobuf.Duration
	22, // 3: lession.v1.Asset.created_at:type_name -> google.protobuf.Timestamp
	22, // 4: lession.v1.Asset.updated_at:type_name -> google.protobuf.Timestamp
	22, // 5: lession.v1.Asset.ready_at:type_name -> google.protobuf.Timestamp
	20, // 6: lession.v1.UploadSession.type:type_name -> lession.v1.MediaType
	2,  // 7: lession.v1.UploadSession.protocol:type_name -> lession.v1.UploadProtocol
	1,  // 8: lession.v1.UploadSession.status:type_name -> lession.v1.UploadStatus
	5,  // 9: lession.v1.UploadSession.target:type_name -> lession.v1.UploadTarget
	22, // 10: lession.v1.UploadSession.expires_at:type_name -> google.protobuf.Timestamp
	22, // 11: lession.v1.UploadSession.created_at:type_name -> google.protobuf.Timestamp
	22, // 12: lession.v1.UploadSession.updated_at:type_name -> google.protobuf.Timestamp
	18, // 13: lession.v1.UploadTarget.headers:type_name -> lession.v1.UploadTarget.HeadersEntry
	19, // 14: lession.v1.UploadTarget.form_fields:type_name -> lession.v1.UploadTarget.FormFieldsEntry
	20, // 15: lession.v1.CreateUploadRequest.type:type_name -> lession.v1.MediaType
	4,  // 16: lession.v1.CreateUploadResponse.upload:type_name -> lession.v1.UploadSession
	4,  // 17: lession.v1.GetUploadResponse.upload:type_name -> lession.v1.UploadSession
	3,  // 18: lession.v1.CompleteUploadResponse.asset:type_name -> lession.v1.Asset
	4,  // 19: lession.v1.CompleteUploadResponse.upload:type_name -> lession.v1.UploadSession
	3,  // 20: lession.v1.GetAssetResponse.asset:type_name -> lession.v1.Asset
	0,  // 21: lession.v1.ListAssetsRequest.statuses:type_name -> lession.v1.AssetStatus
	20, // 22: lession.v1.ListAssetsRequest.types:type_name -> lession.v1.MediaType
	3,  // 23: lession.v1.ListAssetsResponse.assets:type_name -> lession.v1.Asset
	3,  // 24: lession.v1.DeleteAssetResponse.asset:type_name -> lession.v1.Asset
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_lession_v1_asset_proto_init() }
func file_lession_v1_asset_proto_init() {
	if File_lession_v1_asset_proto != nil {
		return
	}
	file_lession_v1_series_proto_init()
	file_lession_v1_asset_proto_msgTypes[5].OneofWrappers = []any{
		(*GetUploadRequest_UploadId)(nil),
		(*GetUploadRequest_AssetKey)(nil),
	}
	file_lession_v1_asset_proto_msgTypes[7].OneofWrappers = []any{
		(*CompleteUploadRequest_UploadId)(nil),
		(*CompleteUploadRequest_AssetKey)(nil),
	}
	file_lession_v1_asset_proto_msgTypes[9].OneofWrappers = []any{
		(*GetAssetRequest_AssetId)(nil),
		(*GetAssetRequest_AssetKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_lession_v1_asset_proto_rawDesc), len(file_lession_v1_asset_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lession_v1_asset_proto_goTypes,
		DependencyIndexes: file_lession_v1_asset_proto_depIdxs,
		EnumInfos:         file_lession_v1_asset_proto_enumTypes,
		MessageInfos:      file_lession_v1_asset_proto_msgTypes,
	}.Build()
	File_lession_v1_asset_proto = out.File
	file_lession_v1_asset_proto_goTypes = nil
	file_lession_v1_asset_proto_depIdxs = nil
}
