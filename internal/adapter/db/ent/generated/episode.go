// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/episode"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/series"
	"github.com/google/uuid"
)

// Episode is the model entity for the Episode schema.
type Episode struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SeriesID holds the value of the "series_id" field.
	SeriesID uuid.UUID `json:"series_id,omitempty"`
	// Seq holds the value of the "seq" field.
	Seq uint32 `json:"seq,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DurationSeconds holds the value of the "duration_seconds" field.
	DurationSeconds int `json:"duration_seconds,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// ResourceAssetID holds the value of the "resource_asset_id" field.
	ResourceAssetID *uuid.UUID `json:"resource_asset_id,omitempty"`
	// ResourceType holds the value of the "resource_type" field.
	ResourceType int `json:"resource_type,omitempty"`
	// ResourcePlaybackURL holds the value of the "resource_playback_url" field.
	ResourcePlaybackURL string `json:"resource_playback_url,omitempty"`
	// ResourceMimeType holds the value of the "resource_mime_type" field.
	ResourceMimeType string `json:"resource_mime_type,omitempty"`
	// TranscriptLanguage holds the value of the "transcript_language" field.
	TranscriptLanguage string `json:"transcript_language,omitempty"`
	// TranscriptFormat holds the value of the "transcript_format" field.
	TranscriptFormat int `json:"transcript_format,omitempty"`
	// TranscriptContent holds the value of the "transcript_content" field.
	TranscriptContent string `json:"transcript_content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// PublishedAt holds the value of the "published_at" field.
	PublishedAt *time.Time `json:"published_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EpisodeQuery when eager-loading is set.
	Edges        EpisodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EpisodeEdges holds the relations/edges for other nodes in the graph.
type EpisodeEdges struct {
	// Series holds the value of the series edge.
	Series *Series `json:"series,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SeriesOrErr returns the Series value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EpisodeEdges) SeriesOrErr() (*Series, error) {
	if e.Series != nil {
		return e.Series, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: series.Label}
	}
	return nil, &NotLoadedError{edge: "series"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Episode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case episode.FieldResourceAssetID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case episode.FieldSeq, episode.FieldDurationSeconds, episode.FieldStatus, episode.FieldResourceType, episode.FieldTranscriptFormat:
			values[i] = new(sql.NullInt64)
		case episode.FieldTitle, episode.FieldDescription, episode.FieldResourcePlaybackURL, episode.FieldResourceMimeType, episode.FieldTranscriptLanguage, episode.FieldTranscriptContent:
			values[i] = new(sql.NullString)
		case episode.FieldCreatedAt, episode.FieldUpdatedAt, episode.FieldPublishedAt, episode.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case episode.FieldID, episode.FieldSeriesID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Episode fields.
func (_m *Episode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case episode.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case episode.FieldSeriesID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field series_id", values[i])
			} else if value != nil {
				_m.SeriesID = *value
			}
		case episode.FieldSeq:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field seq", values[i])
			} else if value.Valid {
				_m.Seq = uint32(value.Int64)
			}
		case episode.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case episode.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case episode.FieldDurationSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_seconds", values[i])
			} else if value.Valid {
				_m.DurationSeconds = int(value.Int64)
			}
		case episode.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = int(value.Int64)
			}
		case episode.FieldResourceAssetID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field resource_asset_id", values[i])
			} else if value.Valid {
				_m.ResourceAssetID = new(uuid.UUID)
				*_m.ResourceAssetID = *value.S.(*uuid.UUID)
			}
		case episode.FieldResourceType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				_m.ResourceType = int(value.Int64)
			}
		case episode.FieldResourcePlaybackURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_playback_url", values[i])
			} else if value.Valid {
				_m.ResourcePlaybackURL = value.String
			}
		case episode.FieldResourceMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_mime_type", values[i])
			} else if value.Valid {
				_m.ResourceMimeType = value.String
			}
		case episode.FieldTranscriptLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transcript_language", values[i])
			} else if value.Valid {
				_m.TranscriptLanguage = value.String
			}
		case episode.FieldTranscriptFormat:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transcript_format", values[i])
			} else if value.Valid {
				_m.TranscriptFormat = int(value.Int64)
			}
		case episode.FieldTranscriptContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transcript_content", values[i])
			} else if value.Valid {
				_m.TranscriptContent = value.String
			}
		case episode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case episode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case episode.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_at", values[i])
			} else if value.Valid {
				_m.PublishedAt = new(time.Time)
				*_m.PublishedAt = value.Time
			}
		case episode.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Episode.
// This includes values selected through modifiers, order, etc.
func (_m *Episode) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySeries queries the "series" edge of the Episode entity.
func (_m *Episode) QuerySeries() *SeriesQuery {
	return NewEpisodeClient(_m.config).QuerySeries(_m)
}

// Update returns a builder for updating this Episode.
// Note that you need to call Episode.Unwrap() before calling this method if this Episode
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Episode) Update() *EpisodeUpdateOne {
	return NewEpisodeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Episode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Episode) Unwrap() *Episode {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Episode is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Episode) String() string {
	var builder strings.Builder
	builder.WriteString("Episode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("series_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.SeriesID))
	builder.WriteString(", ")
	builder.WriteString("seq=")
	builder.WriteString(fmt.Sprintf("%v", _m.Seq))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", _m.DurationSeconds))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	if v := _m.ResourceAssetID; v != nil {
		builder.WriteString("resource_asset_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.ResourceType))
	builder.WriteString(", ")
	builder.WriteString("resource_playback_url=")
	builder.WriteString(_m.ResourcePlaybackURL)
	builder.WriteString(", ")
	builder.WriteString("resource_mime_type=")
	builder.WriteString(_m.ResourceMimeType)
	builder.WriteString(", ")
	builder.WriteString("transcript_language=")
	builder.WriteString(_m.TranscriptLanguage)
	builder.WriteString(", ")
	builder.WriteString("transcript_format=")
	builder.WriteString(fmt.Sprintf("%v", _m.TranscriptFormat))
	builder.WriteString(", ")
	builder.WriteString("transcript_content=")
	builder.WriteString(_m.TranscriptContent)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.PublishedAt; v != nil {
		builder.WriteString("published_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Episodes is a parsable slice of Episode.
type Episodes []*Episode
