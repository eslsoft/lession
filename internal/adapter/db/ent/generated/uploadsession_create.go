// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/uploadsession"
	"github.com/google/uuid"
)

// UploadSessionCreate is the builder for creating a UploadSession entity.
type UploadSessionCreate struct {
	config
	mutation *UploadSessionMutation
	hooks    []Hook
}

// SetAssetKey sets the "asset_key" field.
func (_c *UploadSessionCreate) SetAssetKey(v string) *UploadSessionCreate {
	_c.mutation.SetAssetKey(v)
	return _c
}

// SetType sets the "type" field.
func (_c *UploadSessionCreate) SetType(v int) *UploadSessionCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *UploadSessionCreate) SetNillableType(v *int) *UploadSessionCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetProtocol sets the "protocol" field.
func (_c *UploadSessionCreate) SetProtocol(v int) *UploadSessionCreate {
	_c.mutation.SetProtocol(v)
	return _c
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (_c *UploadSessionCreate) SetNillableProtocol(v *int) *UploadSessionCreate {
	if v != nil {
		_c.SetProtocol(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *UploadSessionCreate) SetStatus(v int) *UploadSessionCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *UploadSessionCreate) SetNillableStatus(v *int) *UploadSessionCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetTargetMethod sets the "target_method" field.
func (_c *UploadSessionCreate) SetTargetMethod(v string) *UploadSessionCreate {
	_c.mutation.SetTargetMethod(v)
	return _c
}

// SetTargetURL sets the "target_url" field.
func (_c *UploadSessionCreate) SetTargetURL(v string) *UploadSessionCreate {
	_c.mutation.SetTargetURL(v)
	return _c
}

// SetTargetHeaders sets the "target_headers" field.
func (_c *UploadSessionCreate) SetTargetHeaders(v map[string]string) *UploadSessionCreate {
	_c.mutation.SetTargetHeaders(v)
	return _c
}

// SetTargetFormFields sets the "target_form_fields" field.
func (_c *UploadSessionCreate) SetTargetFormFields(v map[string]string) *UploadSessionCreate {
	_c.mutation.SetTargetFormFields(v)
	return _c
}

// SetOriginalFilename sets the "original_filename" field.
func (_c *UploadSessionCreate) SetOriginalFilename(v string) *UploadSessionCreate {
	_c.mutation.SetOriginalFilename(v)
	return _c
}

// SetMimeType sets the "mime_type" field.
func (_c *UploadSessionCreate) SetMimeType(v string) *UploadSessionCreate {
	_c.mutation.SetMimeType(v)
	return _c
}

// SetContentLength sets the "content_length" field.
func (_c *UploadSessionCreate) SetContentLength(v int64) *UploadSessionCreate {
	_c.mutation.SetContentLength(v)
	return _c
}

// SetNillableContentLength sets the "content_length" field if the given value is not nil.
func (_c *UploadSessionCreate) SetNillableContentLength(v *int64) *UploadSessionCreate {
	if v != nil {
		_c.SetContentLength(*v)
	}
	return _c
}

// SetExpiresAt sets the "expires_at" field.
func (_c *UploadSessionCreate) SetExpiresAt(v time.Time) *UploadSessionCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UploadSessionCreate) SetCreatedAt(v time.Time) *UploadSessionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UploadSessionCreate) SetNillableCreatedAt(v *time.Time) *UploadSessionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UploadSessionCreate) SetUpdatedAt(v time.Time) *UploadSessionCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UploadSessionCreate) SetNillableUpdatedAt(v *time.Time) *UploadSessionCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *UploadSessionCreate) SetID(v uuid.UUID) *UploadSessionCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *UploadSessionCreate) SetNillableID(v *uuid.UUID) *UploadSessionCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the UploadSessionMutation object of the builder.
func (_c *UploadSessionCreate) Mutation() *UploadSessionMutation {
	return _c.mutation
}

// Save creates the UploadSession in the database.
func (_c *UploadSessionCreate) Save(ctx context.Context) (*UploadSession, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UploadSessionCreate) SaveX(ctx context.Context) *UploadSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UploadSessionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UploadSessionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UploadSessionCreate) defaults() {
	if _, ok := _c.mutation.GetType(); !ok {
		v := uploadsession.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.Protocol(); !ok {
		v := uploadsession.DefaultProtocol
		_c.mutation.SetProtocol(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := uploadsession.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.TargetHeaders(); !ok {
		v := uploadsession.DefaultTargetHeaders()
		_c.mutation.SetTargetHeaders(v)
	}
	if _, ok := _c.mutation.TargetFormFields(); !ok {
		v := uploadsession.DefaultTargetFormFields()
		_c.mutation.SetTargetFormFields(v)
	}
	if _, ok := _c.mutation.ContentLength(); !ok {
		v := uploadsession.DefaultContentLength
		_c.mutation.SetContentLength(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := uploadsession.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := uploadsession.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := uploadsession.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UploadSessionCreate) check() error {
	if _, ok := _c.mutation.AssetKey(); !ok {
		return &ValidationError{Name: "asset_key", err: errors.New(`generated: missing required field "UploadSession.asset_key"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`generated: missing required field "UploadSession.type"`)}
	}
	if _, ok := _c.mutation.Protocol(); !ok {
		return &ValidationError{Name: "protocol", err: errors.New(`generated: missing required field "UploadSession.protocol"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "UploadSession.status"`)}
	}
	if _, ok := _c.mutation.TargetMethod(); !ok {
		return &ValidationError{Name: "target_method", err: errors.New(`generated: missing required field "UploadSession.target_method"`)}
	}
	if _, ok := _c.mutation.TargetURL(); !ok {
		return &ValidationError{Name: "target_url", err: errors.New(`generated: missing required field "UploadSession.target_url"`)}
	}
	if _, ok := _c.mutation.OriginalFilename(); !ok {
		return &ValidationError{Name: "original_filename", err: errors.New(`generated: missing required field "UploadSession.original_filename"`)}
	}
	if _, ok := _c.mutation.MimeType(); !ok {
		return &ValidationError{Name: "mime_type", err: errors.New(`generated: missing required field "UploadSession.mime_type"`)}
	}
	if _, ok := _c.mutation.ContentLength(); !ok {
		return &ValidationError{Name: "content_length", err: errors.New(`generated: missing required field "UploadSession.content_length"`)}
	}
	if _, ok := _c.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`generated: missing required field "UploadSession.expires_at"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "UploadSession.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "UploadSession.updated_at"`)}
	}
	return nil
}

func (_c *UploadSessionCreate) sqlSave(ctx context.Context) (*UploadSession, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UploadSessionCreate) createSpec() (*UploadSession, *sqlgraph.CreateSpec) {
	var (
		_node = &UploadSession{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(uploadsession.Table, sqlgraph.NewFieldSpec(uploadsession.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.AssetKey(); ok {
		_spec.SetField(uploadsession.FieldAssetKey, field.TypeString, value)
		_node.AssetKey = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(uploadsession.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Protocol(); ok {
		_spec.SetField(uploadsession.FieldProtocol, field.TypeInt, value)
		_node.Protocol = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(uploadsession.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.TargetMethod(); ok {
		_spec.SetField(uploadsession.FieldTargetMethod, field.TypeString, value)
		_node.TargetMethod = value
	}
	if value, ok := _c.mutation.TargetURL(); ok {
		_spec.SetField(uploadsession.FieldTargetURL, field.TypeString, value)
		_node.TargetURL = value
	}
	if value, ok := _c.mutation.TargetHeaders(); ok {
		_spec.SetField(uploadsession.FieldTargetHeaders, field.TypeJSON, value)
		_node.TargetHeaders = value
	}
	if value, ok := _c.mutation.TargetFormFields(); ok {
		_spec.SetField(uploadsession.FieldTargetFormFields, field.TypeJSON, value)
		_node.TargetFormFields = value
	}
	if value, ok := _c.mutation.OriginalFilename(); ok {
		_spec.SetField(uploadsession.FieldOriginalFilename, field.TypeString, value)
		_node.OriginalFilename = value
	}
	if value, ok := _c.mutation.MimeType(); ok {
		_spec.SetField(uploadsession.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := _c.mutation.ContentLength(); ok {
		_spec.SetField(uploadsession.FieldContentLength, field.TypeInt64, value)
		_node.ContentLength = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(uploadsession.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(uploadsession.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(uploadsession.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// UploadSessionCreateBulk is the builder for creating many UploadSession entities in bulk.
type UploadSessionCreateBulk struct {
	config
	err      error
	builders []*UploadSessionCreate
}

// Save creates the UploadSession entities in the database.
func (_c *UploadSessionCreateBulk) Save(ctx context.Context) ([]*UploadSession, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UploadSession, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UploadSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UploadSessionCreateBulk) SaveX(ctx context.Context) []*UploadSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UploadSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UploadSessionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
