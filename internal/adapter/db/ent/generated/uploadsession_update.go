// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/predicate"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/uploadsession"
)

// UploadSessionUpdate is the builder for updating UploadSession entities.
type UploadSessionUpdate struct {
	config
	hooks    []Hook
	mutation *UploadSessionMutation
}

// Where appends a list predicates to the UploadSessionUpdate builder.
func (_u *UploadSessionUpdate) Where(ps ...predicate.UploadSession) *UploadSessionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAssetKey sets the "asset_key" field.
func (_u *UploadSessionUpdate) SetAssetKey(v string) *UploadSessionUpdate {
	_u.mutation.SetAssetKey(v)
	return _u
}

// SetNillableAssetKey sets the "asset_key" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableAssetKey(v *string) *UploadSessionUpdate {
	if v != nil {
		_u.SetAssetKey(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *UploadSessionUpdate) SetType(v int) *UploadSessionUpdate {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableType(v *int) *UploadSessionUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *UploadSessionUpdate) AddType(v int) *UploadSessionUpdate {
	_u.mutation.AddType(v)
	return _u
}

// SetProtocol sets the "protocol" field.
func (_u *UploadSessionUpdate) SetProtocol(v int) *UploadSessionUpdate {
	_u.mutation.ResetProtocol()
	_u.mutation.SetProtocol(v)
	return _u
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableProtocol(v *int) *UploadSessionUpdate {
	if v != nil {
		_u.SetProtocol(*v)
	}
	return _u
}

// AddProtocol adds value to the "protocol" field.
func (_u *UploadSessionUpdate) AddProtocol(v int) *UploadSessionUpdate {
	_u.mutation.AddProtocol(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *UploadSessionUpdate) SetStatus(v int) *UploadSessionUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableStatus(v *int) *UploadSessionUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *UploadSessionUpdate) AddStatus(v int) *UploadSessionUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetTargetMethod sets the "target_method" field.
func (_u *UploadSessionUpdate) SetTargetMethod(v string) *UploadSessionUpdate {
	_u.mutation.SetTargetMethod(v)
	return _u
}

// SetNillableTargetMethod sets the "target_method" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableTargetMethod(v *string) *UploadSessionUpdate {
	if v != nil {
		_u.SetTargetMethod(*v)
	}
	return _u
}

// SetTargetURL sets the "target_url" field.
func (_u *UploadSessionUpdate) SetTargetURL(v string) *UploadSessionUpdate {
	_u.mutation.SetTargetURL(v)
	return _u
}

// SetNillableTargetURL sets the "target_url" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableTargetURL(v *string) *UploadSessionUpdate {
	if v != nil {
		_u.SetTargetURL(*v)
	}
	return _u
}

// SetTargetHeaders sets the "target_headers" field.
func (_u *UploadSessionUpdate) SetTargetHeaders(v map[string]string) *UploadSessionUpdate {
	_u.mutation.SetTargetHeaders(v)
	return _u
}

// ClearTargetHeaders clears the value of the "target_headers" field.
func (_u *UploadSessionUpdate) ClearTargetHeaders() *UploadSessionUpdate {
	_u.mutation.ClearTargetHeaders()
	return _u
}

// SetTargetFormFields sets the "target_form_fields" field.
func (_u *UploadSessionUpdate) SetTargetFormFields(v map[string]string) *UploadSessionUpdate {
	_u.mutation.SetTargetFormFields(v)
	return _u
}

// ClearTargetFormFields clears the value of the "target_form_fields" field.
func (_u *UploadSessionUpdate) ClearTargetFormFields() *UploadSessionUpdate {
	_u.mutation.ClearTargetFormFields()
	return _u
}

// SetOriginalFilename sets the "original_filename" field.
func (_u *UploadSessionUpdate) SetOriginalFilename(v string) *UploadSessionUpdate {
	_u.mutation.SetOriginalFilename(v)
	return _u
}

// SetNillableOriginalFilename sets the "original_filename" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableOriginalFilename(v *string) *UploadSessionUpdate {
	if v != nil {
		_u.SetOriginalFilename(*v)
	}
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *UploadSessionUpdate) SetMimeType(v string) *UploadSessionUpdate {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableMimeType(v *string) *UploadSessionUpdate {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// SetContentLength sets the "content_length" field.
func (_u *UploadSessionUpdate) SetContentLength(v int64) *UploadSessionUpdate {
	_u.mutation.ResetContentLength()
	_u.mutation.SetContentLength(v)
	return _u
}

// SetNillableContentLength sets the "content_length" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableContentLength(v *int64) *UploadSessionUpdate {
	if v != nil {
		_u.SetContentLength(*v)
	}
	return _u
}

// AddContentLength adds value to the "content_length" field.
func (_u *UploadSessionUpdate) AddContentLength(v int64) *UploadSessionUpdate {
	_u.mutation.AddContentLength(v)
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *UploadSessionUpdate) SetExpiresAt(v time.Time) *UploadSessionUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *UploadSessionUpdate) SetNillableExpiresAt(v *time.Time) *UploadSessionUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UploadSessionUpdate) SetUpdatedAt(v time.Time) *UploadSessionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the UploadSessionMutation object of the builder.
func (_u *UploadSessionUpdate) Mutation() *UploadSessionMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UploadSessionUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UploadSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UploadSessionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UploadSessionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UploadSessionUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := uploadsession.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UploadSessionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(uploadsession.Table, uploadsession.Columns, sqlgraph.NewFieldSpec(uploadsession.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AssetKey(); ok {
		_spec.SetField(uploadsession.FieldAssetKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(uploadsession.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(uploadsession.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Protocol(); ok {
		_spec.SetField(uploadsession.FieldProtocol, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedProtocol(); ok {
		_spec.AddField(uploadsession.FieldProtocol, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(uploadsession.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(uploadsession.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TargetMethod(); ok {
		_spec.SetField(uploadsession.FieldTargetMethod, field.TypeString, value)
	}
	if value, ok := _u.mutation.TargetURL(); ok {
		_spec.SetField(uploadsession.FieldTargetURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.TargetHeaders(); ok {
		_spec.SetField(uploadsession.FieldTargetHeaders, field.TypeJSON, value)
	}
	if _u.mutation.TargetHeadersCleared() {
		_spec.ClearField(uploadsession.FieldTargetHeaders, field.TypeJSON)
	}
	if value, ok := _u.mutation.TargetFormFields(); ok {
		_spec.SetField(uploadsession.FieldTargetFormFields, field.TypeJSON, value)
	}
	if _u.mutation.TargetFormFieldsCleared() {
		_spec.ClearField(uploadsession.FieldTargetFormFields, field.TypeJSON)
	}
	if value, ok := _u.mutation.OriginalFilename(); ok {
		_spec.SetField(uploadsession.FieldOriginalFilename, field.TypeString, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(uploadsession.FieldMimeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ContentLength(); ok {
		_spec.SetField(uploadsession.FieldContentLength, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedContentLength(); ok {
		_spec.AddField(uploadsession.FieldContentLength, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(uploadsession.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(uploadsession.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uploadsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UploadSessionUpdateOne is the builder for updating a single UploadSession entity.
type UploadSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UploadSessionMutation
}

// SetAssetKey sets the "asset_key" field.
func (_u *UploadSessionUpdateOne) SetAssetKey(v string) *UploadSessionUpdateOne {
	_u.mutation.SetAssetKey(v)
	return _u
}

// SetNillableAssetKey sets the "asset_key" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableAssetKey(v *string) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetAssetKey(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *UploadSessionUpdateOne) SetType(v int) *UploadSessionUpdateOne {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableType(v *int) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *UploadSessionUpdateOne) AddType(v int) *UploadSessionUpdateOne {
	_u.mutation.AddType(v)
	return _u
}

// SetProtocol sets the "protocol" field.
func (_u *UploadSessionUpdateOne) SetProtocol(v int) *UploadSessionUpdateOne {
	_u.mutation.ResetProtocol()
	_u.mutation.SetProtocol(v)
	return _u
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableProtocol(v *int) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetProtocol(*v)
	}
	return _u
}

// AddProtocol adds value to the "protocol" field.
func (_u *UploadSessionUpdateOne) AddProtocol(v int) *UploadSessionUpdateOne {
	_u.mutation.AddProtocol(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *UploadSessionUpdateOne) SetStatus(v int) *UploadSessionUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableStatus(v *int) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *UploadSessionUpdateOne) AddStatus(v int) *UploadSessionUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetTargetMethod sets the "target_method" field.
func (_u *UploadSessionUpdateOne) SetTargetMethod(v string) *UploadSessionUpdateOne {
	_u.mutation.SetTargetMethod(v)
	return _u
}

// SetNillableTargetMethod sets the "target_method" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableTargetMethod(v *string) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetTargetMethod(*v)
	}
	return _u
}

// SetTargetURL sets the "target_url" field.
func (_u *UploadSessionUpdateOne) SetTargetURL(v string) *UploadSessionUpdateOne {
	_u.mutation.SetTargetURL(v)
	return _u
}

// SetNillableTargetURL sets the "target_url" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableTargetURL(v *string) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetTargetURL(*v)
	}
	return _u
}

// SetTargetHeaders sets the "target_headers" field.
func (_u *UploadSessionUpdateOne) SetTargetHeaders(v map[string]string) *UploadSessionUpdateOne {
	_u.mutation.SetTargetHeaders(v)
	return _u
}

// ClearTargetHeaders clears the value of the "target_headers" field.
func (_u *UploadSessionUpdateOne) ClearTargetHeaders() *UploadSessionUpdateOne {
	_u.mutation.ClearTargetHeaders()
	return _u
}

// SetTargetFormFields sets the "target_form_fields" field.
func (_u *UploadSessionUpdateOne) SetTargetFormFields(v map[string]string) *UploadSessionUpdateOne {
	_u.mutation.SetTargetFormFields(v)
	return _u
}

// ClearTargetFormFields clears the value of the "target_form_fields" field.
func (_u *UploadSessionUpdateOne) ClearTargetFormFields() *UploadSessionUpdateOne {
	_u.mutation.ClearTargetFormFields()
	return _u
}

// SetOriginalFilename sets the "original_filename" field.
func (_u *UploadSessionUpdateOne) SetOriginalFilename(v string) *UploadSessionUpdateOne {
	_u.mutation.SetOriginalFilename(v)
	return _u
}

// SetNillableOriginalFilename sets the "original_filename" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableOriginalFilename(v *string) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetOriginalFilename(*v)
	}
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *UploadSessionUpdateOne) SetMimeType(v string) *UploadSessionUpdateOne {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableMimeType(v *string) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// SetContentLength sets the "content_length" field.
func (_u *UploadSessionUpdateOne) SetContentLength(v int64) *UploadSessionUpdateOne {
	_u.mutation.ResetContentLength()
	_u.mutation.SetContentLength(v)
	return _u
}

// SetNillableContentLength sets the "content_length" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableContentLength(v *int64) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetContentLength(*v)
	}
	return _u
}

// AddContentLength adds value to the "content_length" field.
func (_u *UploadSessionUpdateOne) AddContentLength(v int64) *UploadSessionUpdateOne {
	_u.mutation.AddContentLength(v)
	return _u
}

// SetExpiresAt sets the "expires_at" field.
func (_u *UploadSessionUpdateOne) SetExpiresAt(v time.Time) *UploadSessionUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (_u *UploadSessionUpdateOne) SetNillableExpiresAt(v *time.Time) *UploadSessionUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UploadSessionUpdateOne) SetUpdatedAt(v time.Time) *UploadSessionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the UploadSessionMutation object of the builder.
func (_u *UploadSessionUpdateOne) Mutation() *UploadSessionMutation {
	return _u.mutation
}

// Where appends a list predicates to the UploadSessionUpdate builder.
func (_u *UploadSessionUpdateOne) Where(ps ...predicate.UploadSession) *UploadSessionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UploadSessionUpdateOne) Select(field string, fields ...string) *UploadSessionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UploadSession entity.
func (_u *UploadSessionUpdateOne) Save(ctx context.Context) (*UploadSession, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UploadSessionUpdateOne) SaveX(ctx context.Context) *UploadSession {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UploadSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UploadSessionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UploadSessionUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := uploadsession.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UploadSessionUpdateOne) sqlSave(ctx context.Context) (_node *UploadSession, err error) {
	_spec := sqlgraph.NewUpdateSpec(uploadsession.Table, uploadsession.Columns, sqlgraph.NewFieldSpec(uploadsession.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UploadSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, uploadsession.FieldID)
		for _, f := range fields {
			if !uploadsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != uploadsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AssetKey(); ok {
		_spec.SetField(uploadsession.FieldAssetKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(uploadsession.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(uploadsession.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Protocol(); ok {
		_spec.SetField(uploadsession.FieldProtocol, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedProtocol(); ok {
		_spec.AddField(uploadsession.FieldProtocol, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(uploadsession.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(uploadsession.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TargetMethod(); ok {
		_spec.SetField(uploadsession.FieldTargetMethod, field.TypeString, value)
	}
	if value, ok := _u.mutation.TargetURL(); ok {
		_spec.SetField(uploadsession.FieldTargetURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.TargetHeaders(); ok {
		_spec.SetField(uploadsession.FieldTargetHeaders, field.TypeJSON, value)
	}
	if _u.mutation.TargetHeadersCleared() {
		_spec.ClearField(uploadsession.FieldTargetHeaders, field.TypeJSON)
	}
	if value, ok := _u.mutation.TargetFormFields(); ok {
		_spec.SetField(uploadsession.FieldTargetFormFields, field.TypeJSON, value)
	}
	if _u.mutation.TargetFormFieldsCleared() {
		_spec.ClearField(uploadsession.FieldTargetFormFields, field.TypeJSON)
	}
	if value, ok := _u.mutation.OriginalFilename(); ok {
		_spec.SetField(uploadsession.FieldOriginalFilename, field.TypeString, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(uploadsession.FieldMimeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ContentLength(); ok {
		_spec.SetField(uploadsession.FieldContentLength, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedContentLength(); ok {
		_spec.AddField(uploadsession.FieldContentLength, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(uploadsession.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(uploadsession.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &UploadSession{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{uploadsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
