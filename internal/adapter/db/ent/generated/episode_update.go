// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/episode"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/predicate"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/series"
	"github.com/google/uuid"
)

// EpisodeUpdate is the builder for updating Episode entities.
type EpisodeUpdate struct {
	config
	hooks    []Hook
	mutation *EpisodeMutation
}

// Where appends a list predicates to the EpisodeUpdate builder.
func (_u *EpisodeUpdate) Where(ps ...predicate.Episode) *EpisodeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSeriesID sets the "series_id" field.
func (_u *EpisodeUpdate) SetSeriesID(v uuid.UUID) *EpisodeUpdate {
	_u.mutation.SetSeriesID(v)
	return _u
}

// SetNillableSeriesID sets the "series_id" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableSeriesID(v *uuid.UUID) *EpisodeUpdate {
	if v != nil {
		_u.SetSeriesID(*v)
	}
	return _u
}

// SetSeq sets the "seq" field.
func (_u *EpisodeUpdate) SetSeq(v uint32) *EpisodeUpdate {
	_u.mutation.ResetSeq()
	_u.mutation.SetSeq(v)
	return _u
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableSeq(v *uint32) *EpisodeUpdate {
	if v != nil {
		_u.SetSeq(*v)
	}
	return _u
}

// AddSeq adds value to the "seq" field.
func (_u *EpisodeUpdate) AddSeq(v int32) *EpisodeUpdate {
	_u.mutation.AddSeq(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *EpisodeUpdate) SetTitle(v string) *EpisodeUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableTitle(v *string) *EpisodeUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *EpisodeUpdate) SetDescription(v string) *EpisodeUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableDescription(v *string) *EpisodeUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (_u *EpisodeUpdate) SetDurationSeconds(v int) *EpisodeUpdate {
	_u.mutation.ResetDurationSeconds()
	_u.mutation.SetDurationSeconds(v)
	return _u
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableDurationSeconds(v *int) *EpisodeUpdate {
	if v != nil {
		_u.SetDurationSeconds(*v)
	}
	return _u
}

// AddDurationSeconds adds value to the "duration_seconds" field.
func (_u *EpisodeUpdate) AddDurationSeconds(v int) *EpisodeUpdate {
	_u.mutation.AddDurationSeconds(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *EpisodeUpdate) SetStatus(v int) *EpisodeUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableStatus(v *int) *EpisodeUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *EpisodeUpdate) AddStatus(v int) *EpisodeUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetResourceAssetID sets the "resource_asset_id" field.
func (_u *EpisodeUpdate) SetResourceAssetID(v uuid.UUID) *EpisodeUpdate {
	_u.mutation.SetResourceAssetID(v)
	return _u
}

// SetNillableResourceAssetID sets the "resource_asset_id" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableResourceAssetID(v *uuid.UUID) *EpisodeUpdate {
	if v != nil {
		_u.SetResourceAssetID(*v)
	}
	return _u
}

// ClearResourceAssetID clears the value of the "resource_asset_id" field.
func (_u *EpisodeUpdate) ClearResourceAssetID() *EpisodeUpdate {
	_u.mutation.ClearResourceAssetID()
	return _u
}

// SetResourceType sets the "resource_type" field.
func (_u *EpisodeUpdate) SetResourceType(v int) *EpisodeUpdate {
	_u.mutation.ResetResourceType()
	_u.mutation.SetResourceType(v)
	return _u
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableResourceType(v *int) *EpisodeUpdate {
	if v != nil {
		_u.SetResourceType(*v)
	}
	return _u
}

// AddResourceType adds value to the "resource_type" field.
func (_u *EpisodeUpdate) AddResourceType(v int) *EpisodeUpdate {
	_u.mutation.AddResourceType(v)
	return _u
}

// SetResourcePlaybackURL sets the "resource_playback_url" field.
func (_u *EpisodeUpdate) SetResourcePlaybackURL(v string) *EpisodeUpdate {
	_u.mutation.SetResourcePlaybackURL(v)
	return _u
}

// SetNillableResourcePlaybackURL sets the "resource_playback_url" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableResourcePlaybackURL(v *string) *EpisodeUpdate {
	if v != nil {
		_u.SetResourcePlaybackURL(*v)
	}
	return _u
}

// SetResourceMimeType sets the "resource_mime_type" field.
func (_u *EpisodeUpdate) SetResourceMimeType(v string) *EpisodeUpdate {
	_u.mutation.SetResourceMimeType(v)
	return _u
}

// SetNillableResourceMimeType sets the "resource_mime_type" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableResourceMimeType(v *string) *EpisodeUpdate {
	if v != nil {
		_u.SetResourceMimeType(*v)
	}
	return _u
}

// SetTranscriptLanguage sets the "transcript_language" field.
func (_u *EpisodeUpdate) SetTranscriptLanguage(v string) *EpisodeUpdate {
	_u.mutation.SetTranscriptLanguage(v)
	return _u
}

// SetNillableTranscriptLanguage sets the "transcript_language" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableTranscriptLanguage(v *string) *EpisodeUpdate {
	if v != nil {
		_u.SetTranscriptLanguage(*v)
	}
	return _u
}

// SetTranscriptFormat sets the "transcript_format" field.
func (_u *EpisodeUpdate) SetTranscriptFormat(v int) *EpisodeUpdate {
	_u.mutation.ResetTranscriptFormat()
	_u.mutation.SetTranscriptFormat(v)
	return _u
}

// SetNillableTranscriptFormat sets the "transcript_format" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableTranscriptFormat(v *int) *EpisodeUpdate {
	if v != nil {
		_u.SetTranscriptFormat(*v)
	}
	return _u
}

// AddTranscriptFormat adds value to the "transcript_format" field.
func (_u *EpisodeUpdate) AddTranscriptFormat(v int) *EpisodeUpdate {
	_u.mutation.AddTranscriptFormat(v)
	return _u
}

// SetTranscriptContent sets the "transcript_content" field.
func (_u *EpisodeUpdate) SetTranscriptContent(v string) *EpisodeUpdate {
	_u.mutation.SetTranscriptContent(v)
	return _u
}

// SetNillableTranscriptContent sets the "transcript_content" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableTranscriptContent(v *string) *EpisodeUpdate {
	if v != nil {
		_u.SetTranscriptContent(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EpisodeUpdate) SetUpdatedAt(v time.Time) *EpisodeUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *EpisodeUpdate) SetPublishedAt(v time.Time) *EpisodeUpdate {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillablePublishedAt(v *time.Time) *EpisodeUpdate {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *EpisodeUpdate) ClearPublishedAt() *EpisodeUpdate {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EpisodeUpdate) SetDeletedAt(v time.Time) *EpisodeUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EpisodeUpdate) SetNillableDeletedAt(v *time.Time) *EpisodeUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EpisodeUpdate) ClearDeletedAt() *EpisodeUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetSeries sets the "series" edge to the Series entity.
func (_u *EpisodeUpdate) SetSeries(v *Series) *EpisodeUpdate {
	return _u.SetSeriesID(v.ID)
}

// Mutation returns the EpisodeMutation object of the builder.
func (_u *EpisodeUpdate) Mutation() *EpisodeMutation {
	return _u.mutation
}

// ClearSeries clears the "series" edge to the Series entity.
func (_u *EpisodeUpdate) ClearSeries() *EpisodeUpdate {
	_u.mutation.ClearSeries()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EpisodeUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EpisodeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EpisodeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EpisodeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EpisodeUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := episode.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EpisodeUpdate) check() error {
	if _u.mutation.SeriesCleared() && len(_u.mutation.SeriesIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Episode.series"`)
	}
	return nil
}

func (_u *EpisodeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(episode.Table, episode.Columns, sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Seq(); ok {
		_spec.SetField(episode.FieldSeq, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSeq(); ok {
		_spec.AddField(episode.FieldSeq, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(episode.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(episode.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.DurationSeconds(); ok {
		_spec.SetField(episode.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(episode.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(episode.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(episode.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ResourceAssetID(); ok {
		_spec.SetField(episode.FieldResourceAssetID, field.TypeUUID, value)
	}
	if _u.mutation.ResourceAssetIDCleared() {
		_spec.ClearField(episode.FieldResourceAssetID, field.TypeUUID)
	}
	if value, ok := _u.mutation.ResourceType(); ok {
		_spec.SetField(episode.FieldResourceType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedResourceType(); ok {
		_spec.AddField(episode.FieldResourceType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ResourcePlaybackURL(); ok {
		_spec.SetField(episode.FieldResourcePlaybackURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ResourceMimeType(); ok {
		_spec.SetField(episode.FieldResourceMimeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.TranscriptLanguage(); ok {
		_spec.SetField(episode.FieldTranscriptLanguage, field.TypeString, value)
	}
	if value, ok := _u.mutation.TranscriptFormat(); ok {
		_spec.SetField(episode.FieldTranscriptFormat, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTranscriptFormat(); ok {
		_spec.AddField(episode.FieldTranscriptFormat, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TranscriptContent(); ok {
		_spec.SetField(episode.FieldTranscriptContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(episode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(episode.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(episode.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(episode.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(episode.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeriesTable,
			Columns: []string{episode.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeriesTable,
			Columns: []string{episode.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EpisodeUpdateOne is the builder for updating a single Episode entity.
type EpisodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EpisodeMutation
}

// SetSeriesID sets the "series_id" field.
func (_u *EpisodeUpdateOne) SetSeriesID(v uuid.UUID) *EpisodeUpdateOne {
	_u.mutation.SetSeriesID(v)
	return _u
}

// SetNillableSeriesID sets the "series_id" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableSeriesID(v *uuid.UUID) *EpisodeUpdateOne {
	if v != nil {
		_u.SetSeriesID(*v)
	}
	return _u
}

// SetSeq sets the "seq" field.
func (_u *EpisodeUpdateOne) SetSeq(v uint32) *EpisodeUpdateOne {
	_u.mutation.ResetSeq()
	_u.mutation.SetSeq(v)
	return _u
}

// SetNillableSeq sets the "seq" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableSeq(v *uint32) *EpisodeUpdateOne {
	if v != nil {
		_u.SetSeq(*v)
	}
	return _u
}

// AddSeq adds value to the "seq" field.
func (_u *EpisodeUpdateOne) AddSeq(v int32) *EpisodeUpdateOne {
	_u.mutation.AddSeq(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *EpisodeUpdateOne) SetTitle(v string) *EpisodeUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableTitle(v *string) *EpisodeUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *EpisodeUpdateOne) SetDescription(v string) *EpisodeUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableDescription(v *string) *EpisodeUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (_u *EpisodeUpdateOne) SetDurationSeconds(v int) *EpisodeUpdateOne {
	_u.mutation.ResetDurationSeconds()
	_u.mutation.SetDurationSeconds(v)
	return _u
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableDurationSeconds(v *int) *EpisodeUpdateOne {
	if v != nil {
		_u.SetDurationSeconds(*v)
	}
	return _u
}

// AddDurationSeconds adds value to the "duration_seconds" field.
func (_u *EpisodeUpdateOne) AddDurationSeconds(v int) *EpisodeUpdateOne {
	_u.mutation.AddDurationSeconds(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *EpisodeUpdateOne) SetStatus(v int) *EpisodeUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableStatus(v *int) *EpisodeUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *EpisodeUpdateOne) AddStatus(v int) *EpisodeUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetResourceAssetID sets the "resource_asset_id" field.
func (_u *EpisodeUpdateOne) SetResourceAssetID(v uuid.UUID) *EpisodeUpdateOne {
	_u.mutation.SetResourceAssetID(v)
	return _u
}

// SetNillableResourceAssetID sets the "resource_asset_id" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableResourceAssetID(v *uuid.UUID) *EpisodeUpdateOne {
	if v != nil {
		_u.SetResourceAssetID(*v)
	}
	return _u
}

// ClearResourceAssetID clears the value of the "resource_asset_id" field.
func (_u *EpisodeUpdateOne) ClearResourceAssetID() *EpisodeUpdateOne {
	_u.mutation.ClearResourceAssetID()
	return _u
}

// SetResourceType sets the "resource_type" field.
func (_u *EpisodeUpdateOne) SetResourceType(v int) *EpisodeUpdateOne {
	_u.mutation.ResetResourceType()
	_u.mutation.SetResourceType(v)
	return _u
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableResourceType(v *int) *EpisodeUpdateOne {
	if v != nil {
		_u.SetResourceType(*v)
	}
	return _u
}

// AddResourceType adds value to the "resource_type" field.
func (_u *EpisodeUpdateOne) AddResourceType(v int) *EpisodeUpdateOne {
	_u.mutation.AddResourceType(v)
	return _u
}

// SetResourcePlaybackURL sets the "resource_playback_url" field.
func (_u *EpisodeUpdateOne) SetResourcePlaybackURL(v string) *EpisodeUpdateOne {
	_u.mutation.SetResourcePlaybackURL(v)
	return _u
}

// SetNillableResourcePlaybackURL sets the "resource_playback_url" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableResourcePlaybackURL(v *string) *EpisodeUpdateOne {
	if v != nil {
		_u.SetResourcePlaybackURL(*v)
	}
	return _u
}

// SetResourceMimeType sets the "resource_mime_type" field.
func (_u *EpisodeUpdateOne) SetResourceMimeType(v string) *EpisodeUpdateOne {
	_u.mutation.SetResourceMimeType(v)
	return _u
}

// SetNillableResourceMimeType sets the "resource_mime_type" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableResourceMimeType(v *string) *EpisodeUpdateOne {
	if v != nil {
		_u.SetResourceMimeType(*v)
	}
	return _u
}

// SetTranscriptLanguage sets the "transcript_language" field.
func (_u *EpisodeUpdateOne) SetTranscriptLanguage(v string) *EpisodeUpdateOne {
	_u.mutation.SetTranscriptLanguage(v)
	return _u
}

// SetNillableTranscriptLanguage sets the "transcript_language" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableTranscriptLanguage(v *string) *EpisodeUpdateOne {
	if v != nil {
		_u.SetTranscriptLanguage(*v)
	}
	return _u
}

// SetTranscriptFormat sets the "transcript_format" field.
func (_u *EpisodeUpdateOne) SetTranscriptFormat(v int) *EpisodeUpdateOne {
	_u.mutation.ResetTranscriptFormat()
	_u.mutation.SetTranscriptFormat(v)
	return _u
}

// SetNillableTranscriptFormat sets the "transcript_format" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableTranscriptFormat(v *int) *EpisodeUpdateOne {
	if v != nil {
		_u.SetTranscriptFormat(*v)
	}
	return _u
}

// AddTranscriptFormat adds value to the "transcript_format" field.
func (_u *EpisodeUpdateOne) AddTranscriptFormat(v int) *EpisodeUpdateOne {
	_u.mutation.AddTranscriptFormat(v)
	return _u
}

// SetTranscriptContent sets the "transcript_content" field.
func (_u *EpisodeUpdateOne) SetTranscriptContent(v string) *EpisodeUpdateOne {
	_u.mutation.SetTranscriptContent(v)
	return _u
}

// SetNillableTranscriptContent sets the "transcript_content" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableTranscriptContent(v *string) *EpisodeUpdateOne {
	if v != nil {
		_u.SetTranscriptContent(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EpisodeUpdateOne) SetUpdatedAt(v time.Time) *EpisodeUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *EpisodeUpdateOne) SetPublishedAt(v time.Time) *EpisodeUpdateOne {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillablePublishedAt(v *time.Time) *EpisodeUpdateOne {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *EpisodeUpdateOne) ClearPublishedAt() *EpisodeUpdateOne {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EpisodeUpdateOne) SetDeletedAt(v time.Time) *EpisodeUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EpisodeUpdateOne) SetNillableDeletedAt(v *time.Time) *EpisodeUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EpisodeUpdateOne) ClearDeletedAt() *EpisodeUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetSeries sets the "series" edge to the Series entity.
func (_u *EpisodeUpdateOne) SetSeries(v *Series) *EpisodeUpdateOne {
	return _u.SetSeriesID(v.ID)
}

// Mutation returns the EpisodeMutation object of the builder.
func (_u *EpisodeUpdateOne) Mutation() *EpisodeMutation {
	return _u.mutation
}

// ClearSeries clears the "series" edge to the Series entity.
func (_u *EpisodeUpdateOne) ClearSeries() *EpisodeUpdateOne {
	_u.mutation.ClearSeries()
	return _u
}

// Where appends a list predicates to the EpisodeUpdate builder.
func (_u *EpisodeUpdateOne) Where(ps ...predicate.Episode) *EpisodeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EpisodeUpdateOne) Select(field string, fields ...string) *EpisodeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Episode entity.
func (_u *EpisodeUpdateOne) Save(ctx context.Context) (*Episode, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EpisodeUpdateOne) SaveX(ctx context.Context) *Episode {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EpisodeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EpisodeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EpisodeUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := episode.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *EpisodeUpdateOne) check() error {
	if _u.mutation.SeriesCleared() && len(_u.mutation.SeriesIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Episode.series"`)
	}
	return nil
}

func (_u *EpisodeUpdateOne) sqlSave(ctx context.Context) (_node *Episode, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(episode.Table, episode.Columns, sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Episode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, episode.FieldID)
		for _, f := range fields {
			if !episode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != episode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Seq(); ok {
		_spec.SetField(episode.FieldSeq, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSeq(); ok {
		_spec.AddField(episode.FieldSeq, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(episode.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(episode.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.DurationSeconds(); ok {
		_spec.SetField(episode.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(episode.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(episode.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(episode.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ResourceAssetID(); ok {
		_spec.SetField(episode.FieldResourceAssetID, field.TypeUUID, value)
	}
	if _u.mutation.ResourceAssetIDCleared() {
		_spec.ClearField(episode.FieldResourceAssetID, field.TypeUUID)
	}
	if value, ok := _u.mutation.ResourceType(); ok {
		_spec.SetField(episode.FieldResourceType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedResourceType(); ok {
		_spec.AddField(episode.FieldResourceType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ResourcePlaybackURL(); ok {
		_spec.SetField(episode.FieldResourcePlaybackURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.ResourceMimeType(); ok {
		_spec.SetField(episode.FieldResourceMimeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.TranscriptLanguage(); ok {
		_spec.SetField(episode.FieldTranscriptLanguage, field.TypeString, value)
	}
	if value, ok := _u.mutation.TranscriptFormat(); ok {
		_spec.SetField(episode.FieldTranscriptFormat, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTranscriptFormat(); ok {
		_spec.AddField(episode.FieldTranscriptFormat, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TranscriptContent(); ok {
		_spec.SetField(episode.FieldTranscriptContent, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(episode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(episode.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(episode.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(episode.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(episode.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.SeriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeriesTable,
			Columns: []string{episode.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeriesTable,
			Columns: []string{episode.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Episode{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
