// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/episode"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/series"
	"github.com/google/uuid"
)

// EpisodeCreate is the builder for creating a Episode entity.
type EpisodeCreate struct {
	config
	mutation *EpisodeMutation
	hooks    []Hook
}

// SetSeriesID sets the "series_id" field.
func (_c *EpisodeCreate) SetSeriesID(v uuid.UUID) *EpisodeCreate {
	_c.mutation.SetSeriesID(v)
	return _c
}

// SetSeq sets the "seq" field.
func (_c *EpisodeCreate) SetSeq(v uint32) *EpisodeCreate {
	_c.mutation.SetSeq(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *EpisodeCreate) SetTitle(v string) *EpisodeCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *EpisodeCreate) SetDescription(v string) *EpisodeCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableDescription(v *string) *EpisodeCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetDurationSeconds sets the "duration_seconds" field.
func (_c *EpisodeCreate) SetDurationSeconds(v int) *EpisodeCreate {
	_c.mutation.SetDurationSeconds(v)
	return _c
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableDurationSeconds(v *int) *EpisodeCreate {
	if v != nil {
		_c.SetDurationSeconds(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *EpisodeCreate) SetStatus(v int) *EpisodeCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableStatus(v *int) *EpisodeCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetResourceAssetID sets the "resource_asset_id" field.
func (_c *EpisodeCreate) SetResourceAssetID(v uuid.UUID) *EpisodeCreate {
	_c.mutation.SetResourceAssetID(v)
	return _c
}

// SetNillableResourceAssetID sets the "resource_asset_id" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableResourceAssetID(v *uuid.UUID) *EpisodeCreate {
	if v != nil {
		_c.SetResourceAssetID(*v)
	}
	return _c
}

// SetResourceType sets the "resource_type" field.
func (_c *EpisodeCreate) SetResourceType(v int) *EpisodeCreate {
	_c.mutation.SetResourceType(v)
	return _c
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableResourceType(v *int) *EpisodeCreate {
	if v != nil {
		_c.SetResourceType(*v)
	}
	return _c
}

// SetResourcePlaybackURL sets the "resource_playback_url" field.
func (_c *EpisodeCreate) SetResourcePlaybackURL(v string) *EpisodeCreate {
	_c.mutation.SetResourcePlaybackURL(v)
	return _c
}

// SetNillableResourcePlaybackURL sets the "resource_playback_url" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableResourcePlaybackURL(v *string) *EpisodeCreate {
	if v != nil {
		_c.SetResourcePlaybackURL(*v)
	}
	return _c
}

// SetResourceMimeType sets the "resource_mime_type" field.
func (_c *EpisodeCreate) SetResourceMimeType(v string) *EpisodeCreate {
	_c.mutation.SetResourceMimeType(v)
	return _c
}

// SetNillableResourceMimeType sets the "resource_mime_type" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableResourceMimeType(v *string) *EpisodeCreate {
	if v != nil {
		_c.SetResourceMimeType(*v)
	}
	return _c
}

// SetTranscriptLanguage sets the "transcript_language" field.
func (_c *EpisodeCreate) SetTranscriptLanguage(v string) *EpisodeCreate {
	_c.mutation.SetTranscriptLanguage(v)
	return _c
}

// SetNillableTranscriptLanguage sets the "transcript_language" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableTranscriptLanguage(v *string) *EpisodeCreate {
	if v != nil {
		_c.SetTranscriptLanguage(*v)
	}
	return _c
}

// SetTranscriptFormat sets the "transcript_format" field.
func (_c *EpisodeCreate) SetTranscriptFormat(v int) *EpisodeCreate {
	_c.mutation.SetTranscriptFormat(v)
	return _c
}

// SetNillableTranscriptFormat sets the "transcript_format" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableTranscriptFormat(v *int) *EpisodeCreate {
	if v != nil {
		_c.SetTranscriptFormat(*v)
	}
	return _c
}

// SetTranscriptContent sets the "transcript_content" field.
func (_c *EpisodeCreate) SetTranscriptContent(v string) *EpisodeCreate {
	_c.mutation.SetTranscriptContent(v)
	return _c
}

// SetNillableTranscriptContent sets the "transcript_content" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableTranscriptContent(v *string) *EpisodeCreate {
	if v != nil {
		_c.SetTranscriptContent(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *EpisodeCreate) SetCreatedAt(v time.Time) *EpisodeCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableCreatedAt(v *time.Time) *EpisodeCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *EpisodeCreate) SetUpdatedAt(v time.Time) *EpisodeCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableUpdatedAt(v *time.Time) *EpisodeCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetPublishedAt sets the "published_at" field.
func (_c *EpisodeCreate) SetPublishedAt(v time.Time) *EpisodeCreate {
	_c.mutation.SetPublishedAt(v)
	return _c
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillablePublishedAt(v *time.Time) *EpisodeCreate {
	if v != nil {
		_c.SetPublishedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *EpisodeCreate) SetDeletedAt(v time.Time) *EpisodeCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableDeletedAt(v *time.Time) *EpisodeCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *EpisodeCreate) SetID(v uuid.UUID) *EpisodeCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *EpisodeCreate) SetNillableID(v *uuid.UUID) *EpisodeCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetSeries sets the "series" edge to the Series entity.
func (_c *EpisodeCreate) SetSeries(v *Series) *EpisodeCreate {
	return _c.SetSeriesID(v.ID)
}

// Mutation returns the EpisodeMutation object of the builder.
func (_c *EpisodeCreate) Mutation() *EpisodeMutation {
	return _c.mutation
}

// Save creates the Episode in the database.
func (_c *EpisodeCreate) Save(ctx context.Context) (*Episode, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *EpisodeCreate) SaveX(ctx context.Context) *Episode {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EpisodeCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EpisodeCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *EpisodeCreate) defaults() {
	if _, ok := _c.mutation.Description(); !ok {
		v := episode.DefaultDescription
		_c.mutation.SetDescription(v)
	}
	if _, ok := _c.mutation.DurationSeconds(); !ok {
		v := episode.DefaultDurationSeconds
		_c.mutation.SetDurationSeconds(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := episode.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ResourceType(); !ok {
		v := episode.DefaultResourceType
		_c.mutation.SetResourceType(v)
	}
	if _, ok := _c.mutation.ResourcePlaybackURL(); !ok {
		v := episode.DefaultResourcePlaybackURL
		_c.mutation.SetResourcePlaybackURL(v)
	}
	if _, ok := _c.mutation.ResourceMimeType(); !ok {
		v := episode.DefaultResourceMimeType
		_c.mutation.SetResourceMimeType(v)
	}
	if _, ok := _c.mutation.TranscriptLanguage(); !ok {
		v := episode.DefaultTranscriptLanguage
		_c.mutation.SetTranscriptLanguage(v)
	}
	if _, ok := _c.mutation.TranscriptFormat(); !ok {
		v := episode.DefaultTranscriptFormat
		_c.mutation.SetTranscriptFormat(v)
	}
	if _, ok := _c.mutation.TranscriptContent(); !ok {
		v := episode.DefaultTranscriptContent
		_c.mutation.SetTranscriptContent(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := episode.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := episode.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := episode.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *EpisodeCreate) check() error {
	if _, ok := _c.mutation.SeriesID(); !ok {
		return &ValidationError{Name: "series_id", err: errors.New(`generated: missing required field "Episode.series_id"`)}
	}
	if _, ok := _c.mutation.Seq(); !ok {
		return &ValidationError{Name: "seq", err: errors.New(`generated: missing required field "Episode.seq"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "Episode.title"`)}
	}
	if _, ok := _c.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`generated: missing required field "Episode.description"`)}
	}
	if _, ok := _c.mutation.DurationSeconds(); !ok {
		return &ValidationError{Name: "duration_seconds", err: errors.New(`generated: missing required field "Episode.duration_seconds"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Episode.status"`)}
	}
	if _, ok := _c.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`generated: missing required field "Episode.resource_type"`)}
	}
	if _, ok := _c.mutation.ResourcePlaybackURL(); !ok {
		return &ValidationError{Name: "resource_playback_url", err: errors.New(`generated: missing required field "Episode.resource_playback_url"`)}
	}
	if _, ok := _c.mutation.ResourceMimeType(); !ok {
		return &ValidationError{Name: "resource_mime_type", err: errors.New(`generated: missing required field "Episode.resource_mime_type"`)}
	}
	if _, ok := _c.mutation.TranscriptLanguage(); !ok {
		return &ValidationError{Name: "transcript_language", err: errors.New(`generated: missing required field "Episode.transcript_language"`)}
	}
	if _, ok := _c.mutation.TranscriptFormat(); !ok {
		return &ValidationError{Name: "transcript_format", err: errors.New(`generated: missing required field "Episode.transcript_format"`)}
	}
	if _, ok := _c.mutation.TranscriptContent(); !ok {
		return &ValidationError{Name: "transcript_content", err: errors.New(`generated: missing required field "Episode.transcript_content"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Episode.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Episode.updated_at"`)}
	}
	if len(_c.mutation.SeriesIDs()) == 0 {
		return &ValidationError{Name: "series", err: errors.New(`generated: missing required edge "Episode.series"`)}
	}
	return nil
}

func (_c *EpisodeCreate) sqlSave(ctx context.Context) (*Episode, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *EpisodeCreate) createSpec() (*Episode, *sqlgraph.CreateSpec) {
	var (
		_node = &Episode{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(episode.Table, sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Seq(); ok {
		_spec.SetField(episode.FieldSeq, field.TypeUint32, value)
		_node.Seq = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(episode.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(episode.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.DurationSeconds(); ok {
		_spec.SetField(episode.FieldDurationSeconds, field.TypeInt, value)
		_node.DurationSeconds = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(episode.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ResourceAssetID(); ok {
		_spec.SetField(episode.FieldResourceAssetID, field.TypeUUID, value)
		_node.ResourceAssetID = &value
	}
	if value, ok := _c.mutation.ResourceType(); ok {
		_spec.SetField(episode.FieldResourceType, field.TypeInt, value)
		_node.ResourceType = value
	}
	if value, ok := _c.mutation.ResourcePlaybackURL(); ok {
		_spec.SetField(episode.FieldResourcePlaybackURL, field.TypeString, value)
		_node.ResourcePlaybackURL = value
	}
	if value, ok := _c.mutation.ResourceMimeType(); ok {
		_spec.SetField(episode.FieldResourceMimeType, field.TypeString, value)
		_node.ResourceMimeType = value
	}
	if value, ok := _c.mutation.TranscriptLanguage(); ok {
		_spec.SetField(episode.FieldTranscriptLanguage, field.TypeString, value)
		_node.TranscriptLanguage = value
	}
	if value, ok := _c.mutation.TranscriptFormat(); ok {
		_spec.SetField(episode.FieldTranscriptFormat, field.TypeInt, value)
		_node.TranscriptFormat = value
	}
	if value, ok := _c.mutation.TranscriptContent(); ok {
		_spec.SetField(episode.FieldTranscriptContent, field.TypeString, value)
		_node.TranscriptContent = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(episode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(episode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.PublishedAt(); ok {
		_spec.SetField(episode.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(episode.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := _c.mutation.SeriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.SeriesTable,
			Columns: []string{episode.SeriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(series.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SeriesID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EpisodeCreateBulk is the builder for creating many Episode entities in bulk.
type EpisodeCreateBulk struct {
	config
	err      error
	builders []*EpisodeCreate
}

// Save creates the Episode entities in the database.
func (_c *EpisodeCreateBulk) Save(ctx context.Context) ([]*Episode, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Episode, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EpisodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *EpisodeCreateBulk) SaveX(ctx context.Context) []*Episode {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *EpisodeCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *EpisodeCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
