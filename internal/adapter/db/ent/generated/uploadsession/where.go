// Code generated by ent, DO NOT EDIT.

package uploadsession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldID, id))
}

// AssetKey applies equality check predicate on the "asset_key" field. It's identical to AssetKeyEQ.
func AssetKey(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldAssetKey, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldType, v))
}

// Protocol applies equality check predicate on the "protocol" field. It's identical to ProtocolEQ.
func Protocol(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldProtocol, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldStatus, v))
}

// TargetMethod applies equality check predicate on the "target_method" field. It's identical to TargetMethodEQ.
func TargetMethod(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldTargetMethod, v))
}

// TargetURL applies equality check predicate on the "target_url" field. It's identical to TargetURLEQ.
func TargetURL(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldTargetURL, v))
}

// OriginalFilename applies equality check predicate on the "original_filename" field. It's identical to OriginalFilenameEQ.
func OriginalFilename(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldOriginalFilename, v))
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldMimeType, v))
}

// ContentLength applies equality check predicate on the "content_length" field. It's identical to ContentLengthEQ.
func ContentLength(v int64) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldContentLength, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldExpiresAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// AssetKeyEQ applies the EQ predicate on the "asset_key" field.
func AssetKeyEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldAssetKey, v))
}

// AssetKeyNEQ applies the NEQ predicate on the "asset_key" field.
func AssetKeyNEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldAssetKey, v))
}

// AssetKeyIn applies the In predicate on the "asset_key" field.
func AssetKeyIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldAssetKey, vs...))
}

// AssetKeyNotIn applies the NotIn predicate on the "asset_key" field.
func AssetKeyNotIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldAssetKey, vs...))
}

// AssetKeyGT applies the GT predicate on the "asset_key" field.
func AssetKeyGT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldAssetKey, v))
}

// AssetKeyGTE applies the GTE predicate on the "asset_key" field.
func AssetKeyGTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldAssetKey, v))
}

// AssetKeyLT applies the LT predicate on the "asset_key" field.
func AssetKeyLT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldAssetKey, v))
}

// AssetKeyLTE applies the LTE predicate on the "asset_key" field.
func AssetKeyLTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldAssetKey, v))
}

// AssetKeyContains applies the Contains predicate on the "asset_key" field.
func AssetKeyContains(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContains(FieldAssetKey, v))
}

// AssetKeyHasPrefix applies the HasPrefix predicate on the "asset_key" field.
func AssetKeyHasPrefix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasPrefix(FieldAssetKey, v))
}

// AssetKeyHasSuffix applies the HasSuffix predicate on the "asset_key" field.
func AssetKeyHasSuffix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasSuffix(FieldAssetKey, v))
}

// AssetKeyEqualFold applies the EqualFold predicate on the "asset_key" field.
func AssetKeyEqualFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEqualFold(FieldAssetKey, v))
}

// AssetKeyContainsFold applies the ContainsFold predicate on the "asset_key" field.
func AssetKeyContainsFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContainsFold(FieldAssetKey, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldType, v))
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldProtocol, v))
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldProtocol, v))
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldProtocol, vs...))
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldProtocol, vs...))
}

// ProtocolGT applies the GT predicate on the "protocol" field.
func ProtocolGT(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldProtocol, v))
}

// ProtocolGTE applies the GTE predicate on the "protocol" field.
func ProtocolGTE(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldProtocol, v))
}

// ProtocolLT applies the LT predicate on the "protocol" field.
func ProtocolLT(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldProtocol, v))
}

// ProtocolLTE applies the LTE predicate on the "protocol" field.
func ProtocolLTE(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldProtocol, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldStatus, v))
}

// TargetMethodEQ applies the EQ predicate on the "target_method" field.
func TargetMethodEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldTargetMethod, v))
}

// TargetMethodNEQ applies the NEQ predicate on the "target_method" field.
func TargetMethodNEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldTargetMethod, v))
}

// TargetMethodIn applies the In predicate on the "target_method" field.
func TargetMethodIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldTargetMethod, vs...))
}

// TargetMethodNotIn applies the NotIn predicate on the "target_method" field.
func TargetMethodNotIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldTargetMethod, vs...))
}

// TargetMethodGT applies the GT predicate on the "target_method" field.
func TargetMethodGT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldTargetMethod, v))
}

// TargetMethodGTE applies the GTE predicate on the "target_method" field.
func TargetMethodGTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldTargetMethod, v))
}

// TargetMethodLT applies the LT predicate on the "target_method" field.
func TargetMethodLT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldTargetMethod, v))
}

// TargetMethodLTE applies the LTE predicate on the "target_method" field.
func TargetMethodLTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldTargetMethod, v))
}

// TargetMethodContains applies the Contains predicate on the "target_method" field.
func TargetMethodContains(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContains(FieldTargetMethod, v))
}

// TargetMethodHasPrefix applies the HasPrefix predicate on the "target_method" field.
func TargetMethodHasPrefix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasPrefix(FieldTargetMethod, v))
}

// TargetMethodHasSuffix applies the HasSuffix predicate on the "target_method" field.
func TargetMethodHasSuffix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasSuffix(FieldTargetMethod, v))
}

// TargetMethodEqualFold applies the EqualFold predicate on the "target_method" field.
func TargetMethodEqualFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEqualFold(FieldTargetMethod, v))
}

// TargetMethodContainsFold applies the ContainsFold predicate on the "target_method" field.
func TargetMethodContainsFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContainsFold(FieldTargetMethod, v))
}

// TargetURLEQ applies the EQ predicate on the "target_url" field.
func TargetURLEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldTargetURL, v))
}

// TargetURLNEQ applies the NEQ predicate on the "target_url" field.
func TargetURLNEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldTargetURL, v))
}

// TargetURLIn applies the In predicate on the "target_url" field.
func TargetURLIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldTargetURL, vs...))
}

// TargetURLNotIn applies the NotIn predicate on the "target_url" field.
func TargetURLNotIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldTargetURL, vs...))
}

// TargetURLGT applies the GT predicate on the "target_url" field.
func TargetURLGT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldTargetURL, v))
}

// TargetURLGTE applies the GTE predicate on the "target_url" field.
func TargetURLGTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldTargetURL, v))
}

// TargetURLLT applies the LT predicate on the "target_url" field.
func TargetURLLT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldTargetURL, v))
}

// TargetURLLTE applies the LTE predicate on the "target_url" field.
func TargetURLLTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldTargetURL, v))
}

// TargetURLContains applies the Contains predicate on the "target_url" field.
func TargetURLContains(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContains(FieldTargetURL, v))
}

// TargetURLHasPrefix applies the HasPrefix predicate on the "target_url" field.
func TargetURLHasPrefix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasPrefix(FieldTargetURL, v))
}

// TargetURLHasSuffix applies the HasSuffix predicate on the "target_url" field.
func TargetURLHasSuffix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasSuffix(FieldTargetURL, v))
}

// TargetURLEqualFold applies the EqualFold predicate on the "target_url" field.
func TargetURLEqualFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEqualFold(FieldTargetURL, v))
}

// TargetURLContainsFold applies the ContainsFold predicate on the "target_url" field.
func TargetURLContainsFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContainsFold(FieldTargetURL, v))
}

// TargetHeadersIsNil applies the IsNil predicate on the "target_headers" field.
func TargetHeadersIsNil() predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIsNull(FieldTargetHeaders))
}

// TargetHeadersNotNil applies the NotNil predicate on the "target_headers" field.
func TargetHeadersNotNil() predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotNull(FieldTargetHeaders))
}

// TargetFormFieldsIsNil applies the IsNil predicate on the "target_form_fields" field.
func TargetFormFieldsIsNil() predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIsNull(FieldTargetFormFields))
}

// TargetFormFieldsNotNil applies the NotNil predicate on the "target_form_fields" field.
func TargetFormFieldsNotNil() predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotNull(FieldTargetFormFields))
}

// OriginalFilenameEQ applies the EQ predicate on the "original_filename" field.
func OriginalFilenameEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldOriginalFilename, v))
}

// OriginalFilenameNEQ applies the NEQ predicate on the "original_filename" field.
func OriginalFilenameNEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldOriginalFilename, v))
}

// OriginalFilenameIn applies the In predicate on the "original_filename" field.
func OriginalFilenameIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldOriginalFilename, vs...))
}

// OriginalFilenameNotIn applies the NotIn predicate on the "original_filename" field.
func OriginalFilenameNotIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldOriginalFilename, vs...))
}

// OriginalFilenameGT applies the GT predicate on the "original_filename" field.
func OriginalFilenameGT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldOriginalFilename, v))
}

// OriginalFilenameGTE applies the GTE predicate on the "original_filename" field.
func OriginalFilenameGTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldOriginalFilename, v))
}

// OriginalFilenameLT applies the LT predicate on the "original_filename" field.
func OriginalFilenameLT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldOriginalFilename, v))
}

// OriginalFilenameLTE applies the LTE predicate on the "original_filename" field.
func OriginalFilenameLTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldOriginalFilename, v))
}

// OriginalFilenameContains applies the Contains predicate on the "original_filename" field.
func OriginalFilenameContains(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContains(FieldOriginalFilename, v))
}

// OriginalFilenameHasPrefix applies the HasPrefix predicate on the "original_filename" field.
func OriginalFilenameHasPrefix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasPrefix(FieldOriginalFilename, v))
}

// OriginalFilenameHasSuffix applies the HasSuffix predicate on the "original_filename" field.
func OriginalFilenameHasSuffix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasSuffix(FieldOriginalFilename, v))
}

// OriginalFilenameEqualFold applies the EqualFold predicate on the "original_filename" field.
func OriginalFilenameEqualFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEqualFold(FieldOriginalFilename, v))
}

// OriginalFilenameContainsFold applies the ContainsFold predicate on the "original_filename" field.
func OriginalFilenameContainsFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContainsFold(FieldOriginalFilename, v))
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldContainsFold(FieldMimeType, v))
}

// ContentLengthEQ applies the EQ predicate on the "content_length" field.
func ContentLengthEQ(v int64) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldContentLength, v))
}

// ContentLengthNEQ applies the NEQ predicate on the "content_length" field.
func ContentLengthNEQ(v int64) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldContentLength, v))
}

// ContentLengthIn applies the In predicate on the "content_length" field.
func ContentLengthIn(vs ...int64) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldContentLength, vs...))
}

// ContentLengthNotIn applies the NotIn predicate on the "content_length" field.
func ContentLengthNotIn(vs ...int64) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldContentLength, vs...))
}

// ContentLengthGT applies the GT predicate on the "content_length" field.
func ContentLengthGT(v int64) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldContentLength, v))
}

// ContentLengthGTE applies the GTE predicate on the "content_length" field.
func ContentLengthGTE(v int64) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldContentLength, v))
}

// ContentLengthLT applies the LT predicate on the "content_length" field.
func ContentLengthLT(v int64) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldContentLength, v))
}

// ContentLengthLTE applies the LTE predicate on the "content_length" field.
func ContentLengthLTE(v int64) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldContentLength, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldExpiresAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UploadSession {
	return predicate.UploadSession(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UploadSession) predicate.UploadSession {
	return predicate.UploadSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UploadSession) predicate.UploadSession {
	return predicate.UploadSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UploadSession) predicate.UploadSession {
	return predicate.UploadSession(sql.NotPredicates(p))
}
