// Code generated by ent, DO NOT EDIT.

package uploadsession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the uploadsession type in the database.
	Label = "upload_session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAssetKey holds the string denoting the asset_key field in the database.
	FieldAssetKey = "asset_key"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldProtocol holds the string denoting the protocol field in the database.
	FieldProtocol = "protocol"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTargetMethod holds the string denoting the target_method field in the database.
	FieldTargetMethod = "target_method"
	// FieldTargetURL holds the string denoting the target_url field in the database.
	FieldTargetURL = "target_url"
	// FieldTargetHeaders holds the string denoting the target_headers field in the database.
	FieldTargetHeaders = "target_headers"
	// FieldTargetFormFields holds the string denoting the target_form_fields field in the database.
	FieldTargetFormFields = "target_form_fields"
	// FieldOriginalFilename holds the string denoting the original_filename field in the database.
	FieldOriginalFilename = "original_filename"
	// FieldMimeType holds the string denoting the mime_type field in the database.
	FieldMimeType = "mime_type"
	// FieldContentLength holds the string denoting the content_length field in the database.
	FieldContentLength = "content_length"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the uploadsession in the database.
	Table = "upload_sessions"
)

// Columns holds all SQL columns for uploadsession fields.
var Columns = []string{
	FieldID,
	FieldAssetKey,
	FieldType,
	FieldProtocol,
	FieldStatus,
	FieldTargetMethod,
	FieldTargetURL,
	FieldTargetHeaders,
	FieldTargetFormFields,
	FieldOriginalFilename,
	FieldMimeType,
	FieldContentLength,
	FieldExpiresAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// DefaultProtocol holds the default value on creation for the "protocol" field.
	DefaultProtocol int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultTargetHeaders holds the default value on creation for the "target_headers" field.
	DefaultTargetHeaders func() map[string]string
	// DefaultTargetFormFields holds the default value on creation for the "target_form_fields" field.
	DefaultTargetFormFields func() map[string]string
	// DefaultContentLength holds the default value on creation for the "content_length" field.
	DefaultContentLength int64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the UploadSession queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAssetKey orders the results by the asset_key field.
func ByAssetKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetKey, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByProtocol orders the results by the protocol field.
func ByProtocol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProtocol, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTargetMethod orders the results by the target_method field.
func ByTargetMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetMethod, opts...).ToFunc()
}

// ByTargetURL orders the results by the target_url field.
func ByTargetURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTargetURL, opts...).ToFunc()
}

// ByOriginalFilename orders the results by the original_filename field.
func ByOriginalFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalFilename, opts...).ToFunc()
}

// ByMimeType orders the results by the mime_type field.
func ByMimeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMimeType, opts...).ToFunc()
}

// ByContentLength orders the results by the content_length field.
func ByContentLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentLength, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
