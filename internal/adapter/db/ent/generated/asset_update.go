// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/asset"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/predicate"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks    []Hook
	mutation *AssetMutation
}

// Where appends a list predicates to the AssetUpdate builder.
func (_u *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAssetKey sets the "asset_key" field.
func (_u *AssetUpdate) SetAssetKey(v string) *AssetUpdate {
	_u.mutation.SetAssetKey(v)
	return _u
}

// SetNillableAssetKey sets the "asset_key" field if the given value is not nil.
func (_u *AssetUpdate) SetNillableAssetKey(v *string) *AssetUpdate {
	if v != nil {
		_u.SetAssetKey(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *AssetUpdate) SetType(v int) *AssetUpdate {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *AssetUpdate) SetNillableType(v *int) *AssetUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *AssetUpdate) AddType(v int) *AssetUpdate {
	_u.mutation.AddType(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *AssetUpdate) SetStatus(v int) *AssetUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AssetUpdate) SetNillableStatus(v *int) *AssetUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *AssetUpdate) AddStatus(v int) *AssetUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetOriginalFilename sets the "original_filename" field.
func (_u *AssetUpdate) SetOriginalFilename(v string) *AssetUpdate {
	_u.mutation.SetOriginalFilename(v)
	return _u
}

// SetNillableOriginalFilename sets the "original_filename" field if the given value is not nil.
func (_u *AssetUpdate) SetNillableOriginalFilename(v *string) *AssetUpdate {
	if v != nil {
		_u.SetOriginalFilename(*v)
	}
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *AssetUpdate) SetMimeType(v string) *AssetUpdate {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *AssetUpdate) SetNillableMimeType(v *string) *AssetUpdate {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// SetFilesize sets the "filesize" field.
func (_u *AssetUpdate) SetFilesize(v int64) *AssetUpdate {
	_u.mutation.ResetFilesize()
	_u.mutation.SetFilesize(v)
	return _u
}

// SetNillableFilesize sets the "filesize" field if the given value is not nil.
func (_u *AssetUpdate) SetNillableFilesize(v *int64) *AssetUpdate {
	if v != nil {
		_u.SetFilesize(*v)
	}
	return _u
}

// AddFilesize adds value to the "filesize" field.
func (_u *AssetUpdate) AddFilesize(v int64) *AssetUpdate {
	_u.mutation.AddFilesize(v)
	return _u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (_u *AssetUpdate) SetDurationSeconds(v int) *AssetUpdate {
	_u.mutation.ResetDurationSeconds()
	_u.mutation.SetDurationSeconds(v)
	return _u
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (_u *AssetUpdate) SetNillableDurationSeconds(v *int) *AssetUpdate {
	if v != nil {
		_u.SetDurationSeconds(*v)
	}
	return _u
}

// AddDurationSeconds adds value to the "duration_seconds" field.
func (_u *AssetUpdate) AddDurationSeconds(v int) *AssetUpdate {
	_u.mutation.AddDurationSeconds(v)
	return _u
}

// SetPlaybackURL sets the "playback_url" field.
func (_u *AssetUpdate) SetPlaybackURL(v string) *AssetUpdate {
	_u.mutation.SetPlaybackURL(v)
	return _u
}

// SetNillablePlaybackURL sets the "playback_url" field if the given value is not nil.
func (_u *AssetUpdate) SetNillablePlaybackURL(v *string) *AssetUpdate {
	if v != nil {
		_u.SetPlaybackURL(*v)
	}
	return _u
}

// ClearPlaybackURL clears the value of the "playback_url" field.
func (_u *AssetUpdate) ClearPlaybackURL() *AssetUpdate {
	_u.mutation.ClearPlaybackURL()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AssetUpdate) SetUpdatedAt(v time.Time) *AssetUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetReadyAt sets the "ready_at" field.
func (_u *AssetUpdate) SetReadyAt(v time.Time) *AssetUpdate {
	_u.mutation.SetReadyAt(v)
	return _u
}

// SetNillableReadyAt sets the "ready_at" field if the given value is not nil.
func (_u *AssetUpdate) SetNillableReadyAt(v *time.Time) *AssetUpdate {
	if v != nil {
		_u.SetReadyAt(*v)
	}
	return _u
}

// ClearReadyAt clears the value of the "ready_at" field.
func (_u *AssetUpdate) ClearReadyAt() *AssetUpdate {
	_u.mutation.ClearReadyAt()
	return _u
}

// Mutation returns the AssetMutation object of the builder.
func (_u *AssetUpdate) Mutation() *AssetMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AssetUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AssetUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AssetUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AssetUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := asset.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *AssetUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AssetKey(); ok {
		_spec.SetField(asset.FieldAssetKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(asset.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(asset.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(asset.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OriginalFilename(); ok {
		_spec.SetField(asset.FieldOriginalFilename, field.TypeString, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(asset.FieldMimeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Filesize(); ok {
		_spec.SetField(asset.FieldFilesize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedFilesize(); ok {
		_spec.AddField(asset.FieldFilesize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.DurationSeconds(); ok {
		_spec.SetField(asset.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(asset.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PlaybackURL(); ok {
		_spec.SetField(asset.FieldPlaybackURL, field.TypeString, value)
	}
	if _u.mutation.PlaybackURLCleared() {
		_spec.ClearField(asset.FieldPlaybackURL, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ReadyAt(); ok {
		_spec.SetField(asset.FieldReadyAt, field.TypeTime, value)
	}
	if _u.mutation.ReadyAtCleared() {
		_spec.ClearField(asset.FieldReadyAt, field.TypeTime)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetMutation
}

// SetAssetKey sets the "asset_key" field.
func (_u *AssetUpdateOne) SetAssetKey(v string) *AssetUpdateOne {
	_u.mutation.SetAssetKey(v)
	return _u
}

// SetNillableAssetKey sets the "asset_key" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillableAssetKey(v *string) *AssetUpdateOne {
	if v != nil {
		_u.SetAssetKey(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *AssetUpdateOne) SetType(v int) *AssetUpdateOne {
	_u.mutation.ResetType()
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillableType(v *int) *AssetUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// AddType adds value to the "type" field.
func (_u *AssetUpdateOne) AddType(v int) *AssetUpdateOne {
	_u.mutation.AddType(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *AssetUpdateOne) SetStatus(v int) *AssetUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillableStatus(v *int) *AssetUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *AssetUpdateOne) AddStatus(v int) *AssetUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetOriginalFilename sets the "original_filename" field.
func (_u *AssetUpdateOne) SetOriginalFilename(v string) *AssetUpdateOne {
	_u.mutation.SetOriginalFilename(v)
	return _u
}

// SetNillableOriginalFilename sets the "original_filename" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillableOriginalFilename(v *string) *AssetUpdateOne {
	if v != nil {
		_u.SetOriginalFilename(*v)
	}
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *AssetUpdateOne) SetMimeType(v string) *AssetUpdateOne {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillableMimeType(v *string) *AssetUpdateOne {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// SetFilesize sets the "filesize" field.
func (_u *AssetUpdateOne) SetFilesize(v int64) *AssetUpdateOne {
	_u.mutation.ResetFilesize()
	_u.mutation.SetFilesize(v)
	return _u
}

// SetNillableFilesize sets the "filesize" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillableFilesize(v *int64) *AssetUpdateOne {
	if v != nil {
		_u.SetFilesize(*v)
	}
	return _u
}

// AddFilesize adds value to the "filesize" field.
func (_u *AssetUpdateOne) AddFilesize(v int64) *AssetUpdateOne {
	_u.mutation.AddFilesize(v)
	return _u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (_u *AssetUpdateOne) SetDurationSeconds(v int) *AssetUpdateOne {
	_u.mutation.ResetDurationSeconds()
	_u.mutation.SetDurationSeconds(v)
	return _u
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillableDurationSeconds(v *int) *AssetUpdateOne {
	if v != nil {
		_u.SetDurationSeconds(*v)
	}
	return _u
}

// AddDurationSeconds adds value to the "duration_seconds" field.
func (_u *AssetUpdateOne) AddDurationSeconds(v int) *AssetUpdateOne {
	_u.mutation.AddDurationSeconds(v)
	return _u
}

// SetPlaybackURL sets the "playback_url" field.
func (_u *AssetUpdateOne) SetPlaybackURL(v string) *AssetUpdateOne {
	_u.mutation.SetPlaybackURL(v)
	return _u
}

// SetNillablePlaybackURL sets the "playback_url" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillablePlaybackURL(v *string) *AssetUpdateOne {
	if v != nil {
		_u.SetPlaybackURL(*v)
	}
	return _u
}

// ClearPlaybackURL clears the value of the "playback_url" field.
func (_u *AssetUpdateOne) ClearPlaybackURL() *AssetUpdateOne {
	_u.mutation.ClearPlaybackURL()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AssetUpdateOne) SetUpdatedAt(v time.Time) *AssetUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetReadyAt sets the "ready_at" field.
func (_u *AssetUpdateOne) SetReadyAt(v time.Time) *AssetUpdateOne {
	_u.mutation.SetReadyAt(v)
	return _u
}

// SetNillableReadyAt sets the "ready_at" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillableReadyAt(v *time.Time) *AssetUpdateOne {
	if v != nil {
		_u.SetReadyAt(*v)
	}
	return _u
}

// ClearReadyAt clears the value of the "ready_at" field.
func (_u *AssetUpdateOne) ClearReadyAt() *AssetUpdateOne {
	_u.mutation.ClearReadyAt()
	return _u
}

// Mutation returns the AssetMutation object of the builder.
func (_u *AssetUpdateOne) Mutation() *AssetMutation {
	return _u.mutation
}

// Where appends a list predicates to the AssetUpdate builder.
func (_u *AssetUpdateOne) Where(ps ...predicate.Asset) *AssetUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Asset entity.
func (_u *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AssetUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := asset.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Asset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AssetKey(); ok {
		_spec.SetField(asset.FieldAssetKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedType(); ok {
		_spec.AddField(asset.FieldType, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(asset.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(asset.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.OriginalFilename(); ok {
		_spec.SetField(asset.FieldOriginalFilename, field.TypeString, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(asset.FieldMimeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Filesize(); ok {
		_spec.SetField(asset.FieldFilesize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedFilesize(); ok {
		_spec.AddField(asset.FieldFilesize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.DurationSeconds(); ok {
		_spec.SetField(asset.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(asset.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.PlaybackURL(); ok {
		_spec.SetField(asset.FieldPlaybackURL, field.TypeString, value)
	}
	if _u.mutation.PlaybackURLCleared() {
		_spec.ClearField(asset.FieldPlaybackURL, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ReadyAt(); ok {
		_spec.SetField(asset.FieldReadyAt, field.TypeTime, value)
	}
	if _u.mutation.ReadyAtCleared() {
		_spec.ClearField(asset.FieldReadyAt, field.TypeTime)
	}
	_node = &Asset{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
