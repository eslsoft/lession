// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/episode"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/predicate"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/series"
	"github.com/google/uuid"
)

// SeriesUpdate is the builder for updating Series entities.
type SeriesUpdate struct {
	config
	hooks    []Hook
	mutation *SeriesMutation
}

// Where appends a list predicates to the SeriesUpdate builder.
func (_u *SeriesUpdate) Where(ps ...predicate.Series) *SeriesUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSlug sets the "slug" field.
func (_u *SeriesUpdate) SetSlug(v string) *SeriesUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *SeriesUpdate) SetNillableSlug(v *string) *SeriesUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *SeriesUpdate) SetTitle(v string) *SeriesUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *SeriesUpdate) SetNillableTitle(v *string) *SeriesUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetSummary sets the "summary" field.
func (_u *SeriesUpdate) SetSummary(v string) *SeriesUpdate {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *SeriesUpdate) SetNillableSummary(v *string) *SeriesUpdate {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// SetLanguage sets the "language" field.
func (_u *SeriesUpdate) SetLanguage(v string) *SeriesUpdate {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *SeriesUpdate) SetNillableLanguage(v *string) *SeriesUpdate {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *SeriesUpdate) SetLevel(v string) *SeriesUpdate {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *SeriesUpdate) SetNillableLevel(v *string) *SeriesUpdate {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetTags sets the "tags" field.
func (_u *SeriesUpdate) SetTags(v []string) *SeriesUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SeriesUpdate) AppendTags(v []string) *SeriesUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SeriesUpdate) ClearTags() *SeriesUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetCoverURL sets the "cover_url" field.
func (_u *SeriesUpdate) SetCoverURL(v string) *SeriesUpdate {
	_u.mutation.SetCoverURL(v)
	return _u
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (_u *SeriesUpdate) SetNillableCoverURL(v *string) *SeriesUpdate {
	if v != nil {
		_u.SetCoverURL(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *SeriesUpdate) SetStatus(v int) *SeriesUpdate {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SeriesUpdate) SetNillableStatus(v *int) *SeriesUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *SeriesUpdate) AddStatus(v int) *SeriesUpdate {
	_u.mutation.AddStatus(v)
	return _u
}

// SetEpisodeCount sets the "episode_count" field.
func (_u *SeriesUpdate) SetEpisodeCount(v int) *SeriesUpdate {
	_u.mutation.ResetEpisodeCount()
	_u.mutation.SetEpisodeCount(v)
	return _u
}

// SetNillableEpisodeCount sets the "episode_count" field if the given value is not nil.
func (_u *SeriesUpdate) SetNillableEpisodeCount(v *int) *SeriesUpdate {
	if v != nil {
		_u.SetEpisodeCount(*v)
	}
	return _u
}

// AddEpisodeCount adds value to the "episode_count" field.
func (_u *SeriesUpdate) AddEpisodeCount(v int) *SeriesUpdate {
	_u.mutation.AddEpisodeCount(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SeriesUpdate) SetUpdatedAt(v time.Time) *SeriesUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *SeriesUpdate) SetPublishedAt(v time.Time) *SeriesUpdate {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *SeriesUpdate) SetNillablePublishedAt(v *time.Time) *SeriesUpdate {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *SeriesUpdate) ClearPublishedAt() *SeriesUpdate {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetAuthorIds sets the "author_ids" field.
func (_u *SeriesUpdate) SetAuthorIds(v []string) *SeriesUpdate {
	_u.mutation.SetAuthorIds(v)
	return _u
}

// AppendAuthorIds appends value to the "author_ids" field.
func (_u *SeriesUpdate) AppendAuthorIds(v []string) *SeriesUpdate {
	_u.mutation.AppendAuthorIds(v)
	return _u
}

// ClearAuthorIds clears the value of the "author_ids" field.
func (_u *SeriesUpdate) ClearAuthorIds() *SeriesUpdate {
	_u.mutation.ClearAuthorIds()
	return _u
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (_u *SeriesUpdate) AddEpisodeIDs(ids ...uuid.UUID) *SeriesUpdate {
	_u.mutation.AddEpisodeIDs(ids...)
	return _u
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (_u *SeriesUpdate) AddEpisodes(v ...*Episode) *SeriesUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEpisodeIDs(ids...)
}

// Mutation returns the SeriesMutation object of the builder.
func (_u *SeriesUpdate) Mutation() *SeriesMutation {
	return _u.mutation
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (_u *SeriesUpdate) ClearEpisodes() *SeriesUpdate {
	_u.mutation.ClearEpisodes()
	return _u
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (_u *SeriesUpdate) RemoveEpisodeIDs(ids ...uuid.UUID) *SeriesUpdate {
	_u.mutation.RemoveEpisodeIDs(ids...)
	return _u
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (_u *SeriesUpdate) RemoveEpisodes(v ...*Episode) *SeriesUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEpisodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SeriesUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SeriesUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SeriesUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SeriesUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SeriesUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := series.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SeriesUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(series.Table, series.Columns, sqlgraph.NewFieldSpec(series.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(series.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(series.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(series.FieldSummary, field.TypeString, value)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(series.FieldLanguage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(series.FieldLevel, field.TypeString, value)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(series.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, series.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(series.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.CoverURL(); ok {
		_spec.SetField(series.FieldCoverURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(series.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(series.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EpisodeCount(); ok {
		_spec.SetField(series.FieldEpisodeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEpisodeCount(); ok {
		_spec.AddField(series.FieldEpisodeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(series.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(series.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(series.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.AuthorIds(); ok {
		_spec.SetField(series.FieldAuthorIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAuthorIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, series.FieldAuthorIds, value)
		})
	}
	if _u.mutation.AuthorIdsCleared() {
		_spec.ClearField(series.FieldAuthorIds, field.TypeJSON)
	}
	if _u.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.EpisodesTable,
			Columns: []string{series.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !_u.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.EpisodesTable,
			Columns: []string{series.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.EpisodesTable,
			Columns: []string{series.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{series.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SeriesUpdateOne is the builder for updating a single Series entity.
type SeriesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SeriesMutation
}

// SetSlug sets the "slug" field.
func (_u *SeriesUpdateOne) SetSlug(v string) *SeriesUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *SeriesUpdateOne) SetNillableSlug(v *string) *SeriesUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *SeriesUpdateOne) SetTitle(v string) *SeriesUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *SeriesUpdateOne) SetNillableTitle(v *string) *SeriesUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetSummary sets the "summary" field.
func (_u *SeriesUpdateOne) SetSummary(v string) *SeriesUpdateOne {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *SeriesUpdateOne) SetNillableSummary(v *string) *SeriesUpdateOne {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// SetLanguage sets the "language" field.
func (_u *SeriesUpdateOne) SetLanguage(v string) *SeriesUpdateOne {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *SeriesUpdateOne) SetNillableLanguage(v *string) *SeriesUpdateOne {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// SetLevel sets the "level" field.
func (_u *SeriesUpdateOne) SetLevel(v string) *SeriesUpdateOne {
	_u.mutation.SetLevel(v)
	return _u
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_u *SeriesUpdateOne) SetNillableLevel(v *string) *SeriesUpdateOne {
	if v != nil {
		_u.SetLevel(*v)
	}
	return _u
}

// SetTags sets the "tags" field.
func (_u *SeriesUpdateOne) SetTags(v []string) *SeriesUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SeriesUpdateOne) AppendTags(v []string) *SeriesUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SeriesUpdateOne) ClearTags() *SeriesUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetCoverURL sets the "cover_url" field.
func (_u *SeriesUpdateOne) SetCoverURL(v string) *SeriesUpdateOne {
	_u.mutation.SetCoverURL(v)
	return _u
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (_u *SeriesUpdateOne) SetNillableCoverURL(v *string) *SeriesUpdateOne {
	if v != nil {
		_u.SetCoverURL(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *SeriesUpdateOne) SetStatus(v int) *SeriesUpdateOne {
	_u.mutation.ResetStatus()
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SeriesUpdateOne) SetNillableStatus(v *int) *SeriesUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// AddStatus adds value to the "status" field.
func (_u *SeriesUpdateOne) AddStatus(v int) *SeriesUpdateOne {
	_u.mutation.AddStatus(v)
	return _u
}

// SetEpisodeCount sets the "episode_count" field.
func (_u *SeriesUpdateOne) SetEpisodeCount(v int) *SeriesUpdateOne {
	_u.mutation.ResetEpisodeCount()
	_u.mutation.SetEpisodeCount(v)
	return _u
}

// SetNillableEpisodeCount sets the "episode_count" field if the given value is not nil.
func (_u *SeriesUpdateOne) SetNillableEpisodeCount(v *int) *SeriesUpdateOne {
	if v != nil {
		_u.SetEpisodeCount(*v)
	}
	return _u
}

// AddEpisodeCount adds value to the "episode_count" field.
func (_u *SeriesUpdateOne) AddEpisodeCount(v int) *SeriesUpdateOne {
	_u.mutation.AddEpisodeCount(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SeriesUpdateOne) SetUpdatedAt(v time.Time) *SeriesUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetPublishedAt sets the "published_at" field.
func (_u *SeriesUpdateOne) SetPublishedAt(v time.Time) *SeriesUpdateOne {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_u *SeriesUpdateOne) SetNillablePublishedAt(v *time.Time) *SeriesUpdateOne {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// ClearPublishedAt clears the value of the "published_at" field.
func (_u *SeriesUpdateOne) ClearPublishedAt() *SeriesUpdateOne {
	_u.mutation.ClearPublishedAt()
	return _u
}

// SetAuthorIds sets the "author_ids" field.
func (_u *SeriesUpdateOne) SetAuthorIds(v []string) *SeriesUpdateOne {
	_u.mutation.SetAuthorIds(v)
	return _u
}

// AppendAuthorIds appends value to the "author_ids" field.
func (_u *SeriesUpdateOne) AppendAuthorIds(v []string) *SeriesUpdateOne {
	_u.mutation.AppendAuthorIds(v)
	return _u
}

// ClearAuthorIds clears the value of the "author_ids" field.
func (_u *SeriesUpdateOne) ClearAuthorIds() *SeriesUpdateOne {
	_u.mutation.ClearAuthorIds()
	return _u
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (_u *SeriesUpdateOne) AddEpisodeIDs(ids ...uuid.UUID) *SeriesUpdateOne {
	_u.mutation.AddEpisodeIDs(ids...)
	return _u
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (_u *SeriesUpdateOne) AddEpisodes(v ...*Episode) *SeriesUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEpisodeIDs(ids...)
}

// Mutation returns the SeriesMutation object of the builder.
func (_u *SeriesUpdateOne) Mutation() *SeriesMutation {
	return _u.mutation
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (_u *SeriesUpdateOne) ClearEpisodes() *SeriesUpdateOne {
	_u.mutation.ClearEpisodes()
	return _u
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (_u *SeriesUpdateOne) RemoveEpisodeIDs(ids ...uuid.UUID) *SeriesUpdateOne {
	_u.mutation.RemoveEpisodeIDs(ids...)
	return _u
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (_u *SeriesUpdateOne) RemoveEpisodes(v ...*Episode) *SeriesUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEpisodeIDs(ids...)
}

// Where appends a list predicates to the SeriesUpdate builder.
func (_u *SeriesUpdateOne) Where(ps ...predicate.Series) *SeriesUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SeriesUpdateOne) Select(field string, fields ...string) *SeriesUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Series entity.
func (_u *SeriesUpdateOne) Save(ctx context.Context) (*Series, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SeriesUpdateOne) SaveX(ctx context.Context) *Series {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SeriesUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SeriesUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SeriesUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := series.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SeriesUpdateOne) sqlSave(ctx context.Context) (_node *Series, err error) {
	_spec := sqlgraph.NewUpdateSpec(series.Table, series.Columns, sqlgraph.NewFieldSpec(series.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Series.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, series.FieldID)
		for _, f := range fields {
			if !series.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != series.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(series.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(series.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(series.FieldSummary, field.TypeString, value)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(series.FieldLanguage, field.TypeString, value)
	}
	if value, ok := _u.mutation.Level(); ok {
		_spec.SetField(series.FieldLevel, field.TypeString, value)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(series.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, series.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(series.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.CoverURL(); ok {
		_spec.SetField(series.FieldCoverURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(series.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStatus(); ok {
		_spec.AddField(series.FieldStatus, field.TypeInt, value)
	}
	if value, ok := _u.mutation.EpisodeCount(); ok {
		_spec.SetField(series.FieldEpisodeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEpisodeCount(); ok {
		_spec.AddField(series.FieldEpisodeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(series.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(series.FieldPublishedAt, field.TypeTime, value)
	}
	if _u.mutation.PublishedAtCleared() {
		_spec.ClearField(series.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.AuthorIds(); ok {
		_spec.SetField(series.FieldAuthorIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAuthorIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, series.FieldAuthorIds, value)
		})
	}
	if _u.mutation.AuthorIdsCleared() {
		_spec.ClearField(series.FieldAuthorIds, field.TypeJSON)
	}
	if _u.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.EpisodesTable,
			Columns: []string{series.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !_u.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.EpisodesTable,
			Columns: []string{series.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.EpisodesTable,
			Columns: []string{series.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Series{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{series.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
