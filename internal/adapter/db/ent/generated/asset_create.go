// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/asset"
	"github.com/google/uuid"
)

// AssetCreate is the builder for creating a Asset entity.
type AssetCreate struct {
	config
	mutation *AssetMutation
	hooks    []Hook
}

// SetAssetKey sets the "asset_key" field.
func (_c *AssetCreate) SetAssetKey(v string) *AssetCreate {
	_c.mutation.SetAssetKey(v)
	return _c
}

// SetType sets the "type" field.
func (_c *AssetCreate) SetType(v int) *AssetCreate {
	_c.mutation.SetType(v)
	return _c
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_c *AssetCreate) SetNillableType(v *int) *AssetCreate {
	if v != nil {
		_c.SetType(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *AssetCreate) SetStatus(v int) *AssetCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *AssetCreate) SetNillableStatus(v *int) *AssetCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetOriginalFilename sets the "original_filename" field.
func (_c *AssetCreate) SetOriginalFilename(v string) *AssetCreate {
	_c.mutation.SetOriginalFilename(v)
	return _c
}

// SetMimeType sets the "mime_type" field.
func (_c *AssetCreate) SetMimeType(v string) *AssetCreate {
	_c.mutation.SetMimeType(v)
	return _c
}

// SetFilesize sets the "filesize" field.
func (_c *AssetCreate) SetFilesize(v int64) *AssetCreate {
	_c.mutation.SetFilesize(v)
	return _c
}

// SetNillableFilesize sets the "filesize" field if the given value is not nil.
func (_c *AssetCreate) SetNillableFilesize(v *int64) *AssetCreate {
	if v != nil {
		_c.SetFilesize(*v)
	}
	return _c
}

// SetDurationSeconds sets the "duration_seconds" field.
func (_c *AssetCreate) SetDurationSeconds(v int) *AssetCreate {
	_c.mutation.SetDurationSeconds(v)
	return _c
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (_c *AssetCreate) SetNillableDurationSeconds(v *int) *AssetCreate {
	if v != nil {
		_c.SetDurationSeconds(*v)
	}
	return _c
}

// SetPlaybackURL sets the "playback_url" field.
func (_c *AssetCreate) SetPlaybackURL(v string) *AssetCreate {
	_c.mutation.SetPlaybackURL(v)
	return _c
}

// SetNillablePlaybackURL sets the "playback_url" field if the given value is not nil.
func (_c *AssetCreate) SetNillablePlaybackURL(v *string) *AssetCreate {
	if v != nil {
		_c.SetPlaybackURL(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *AssetCreate) SetCreatedAt(v time.Time) *AssetCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AssetCreate) SetNillableCreatedAt(v *time.Time) *AssetCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AssetCreate) SetUpdatedAt(v time.Time) *AssetCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AssetCreate) SetNillableUpdatedAt(v *time.Time) *AssetCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetReadyAt sets the "ready_at" field.
func (_c *AssetCreate) SetReadyAt(v time.Time) *AssetCreate {
	_c.mutation.SetReadyAt(v)
	return _c
}

// SetNillableReadyAt sets the "ready_at" field if the given value is not nil.
func (_c *AssetCreate) SetNillableReadyAt(v *time.Time) *AssetCreate {
	if v != nil {
		_c.SetReadyAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AssetCreate) SetID(v uuid.UUID) *AssetCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *AssetCreate) SetNillableID(v *uuid.UUID) *AssetCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the AssetMutation object of the builder.
func (_c *AssetCreate) Mutation() *AssetMutation {
	return _c.mutation
}

// Save creates the Asset in the database.
func (_c *AssetCreate) Save(ctx context.Context) (*Asset, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AssetCreate) SaveX(ctx context.Context) *Asset {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AssetCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AssetCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AssetCreate) defaults() {
	if _, ok := _c.mutation.GetType(); !ok {
		v := asset.DefaultType
		_c.mutation.SetType(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := asset.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Filesize(); !ok {
		v := asset.DefaultFilesize
		_c.mutation.SetFilesize(v)
	}
	if _, ok := _c.mutation.DurationSeconds(); !ok {
		v := asset.DefaultDurationSeconds
		_c.mutation.SetDurationSeconds(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := asset.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := asset.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := asset.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AssetCreate) check() error {
	if _, ok := _c.mutation.AssetKey(); !ok {
		return &ValidationError{Name: "asset_key", err: errors.New(`generated: missing required field "Asset.asset_key"`)}
	}
	if _, ok := _c.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`generated: missing required field "Asset.type"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Asset.status"`)}
	}
	if _, ok := _c.mutation.OriginalFilename(); !ok {
		return &ValidationError{Name: "original_filename", err: errors.New(`generated: missing required field "Asset.original_filename"`)}
	}
	if _, ok := _c.mutation.MimeType(); !ok {
		return &ValidationError{Name: "mime_type", err: errors.New(`generated: missing required field "Asset.mime_type"`)}
	}
	if _, ok := _c.mutation.Filesize(); !ok {
		return &ValidationError{Name: "filesize", err: errors.New(`generated: missing required field "Asset.filesize"`)}
	}
	if _, ok := _c.mutation.DurationSeconds(); !ok {
		return &ValidationError{Name: "duration_seconds", err: errors.New(`generated: missing required field "Asset.duration_seconds"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Asset.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Asset.updated_at"`)}
	}
	return nil
}

func (_c *AssetCreate) sqlSave(ctx context.Context) (*Asset, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AssetCreate) createSpec() (*Asset, *sqlgraph.CreateSpec) {
	var (
		_node = &Asset{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(asset.Table, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.AssetKey(); ok {
		_spec.SetField(asset.FieldAssetKey, field.TypeString, value)
		_node.AssetKey = value
	}
	if value, ok := _c.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(asset.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.OriginalFilename(); ok {
		_spec.SetField(asset.FieldOriginalFilename, field.TypeString, value)
		_node.OriginalFilename = value
	}
	if value, ok := _c.mutation.MimeType(); ok {
		_spec.SetField(asset.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := _c.mutation.Filesize(); ok {
		_spec.SetField(asset.FieldFilesize, field.TypeInt64, value)
		_node.Filesize = value
	}
	if value, ok := _c.mutation.DurationSeconds(); ok {
		_spec.SetField(asset.FieldDurationSeconds, field.TypeInt, value)
		_node.DurationSeconds = value
	}
	if value, ok := _c.mutation.PlaybackURL(); ok {
		_spec.SetField(asset.FieldPlaybackURL, field.TypeString, value)
		_node.PlaybackURL = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(asset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.ReadyAt(); ok {
		_spec.SetField(asset.FieldReadyAt, field.TypeTime, value)
		_node.ReadyAt = &value
	}
	return _node, _spec
}

// AssetCreateBulk is the builder for creating many Asset entities in bulk.
type AssetCreateBulk struct {
	config
	err      error
	builders []*AssetCreate
}

// Save creates the Asset entities in the database.
func (_c *AssetCreateBulk) Save(ctx context.Context) ([]*Asset, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Asset, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AssetCreateBulk) SaveX(ctx context.Context) []*Asset {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AssetCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AssetCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
