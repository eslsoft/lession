// Code generated by ent, DO NOT EDIT.

package asset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the asset type in the database.
	Label = "asset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAssetKey holds the string denoting the asset_key field in the database.
	FieldAssetKey = "asset_key"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOriginalFilename holds the string denoting the original_filename field in the database.
	FieldOriginalFilename = "original_filename"
	// FieldMimeType holds the string denoting the mime_type field in the database.
	FieldMimeType = "mime_type"
	// FieldFilesize holds the string denoting the filesize field in the database.
	FieldFilesize = "filesize"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// FieldPlaybackURL holds the string denoting the playback_url field in the database.
	FieldPlaybackURL = "playback_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldReadyAt holds the string denoting the ready_at field in the database.
	FieldReadyAt = "ready_at"
	// Table holds the table name of the asset in the database.
	Table = "assets"
)

// Columns holds all SQL columns for asset fields.
var Columns = []string{
	FieldID,
	FieldAssetKey,
	FieldType,
	FieldStatus,
	FieldOriginalFilename,
	FieldMimeType,
	FieldFilesize,
	FieldDurationSeconds,
	FieldPlaybackURL,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldReadyAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultFilesize holds the default value on creation for the "filesize" field.
	DefaultFilesize int64
	// DefaultDurationSeconds holds the default value on creation for the "duration_seconds" field.
	DefaultDurationSeconds int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Asset queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAssetKey orders the results by the asset_key field.
func ByAssetKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetKey, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByOriginalFilename orders the results by the original_filename field.
func ByOriginalFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalFilename, opts...).ToFunc()
}

// ByMimeType orders the results by the mime_type field.
func ByMimeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMimeType, opts...).ToFunc()
}

// ByFilesize orders the results by the filesize field.
func ByFilesize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilesize, opts...).ToFunc()
}

// ByDurationSeconds orders the results by the duration_seconds field.
func ByDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationSeconds, opts...).ToFunc()
}

// ByPlaybackURL orders the results by the playback_url field.
func ByPlaybackURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlaybackURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByReadyAt orders the results by the ready_at field.
func ByReadyAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReadyAt, opts...).ToFunc()
}
