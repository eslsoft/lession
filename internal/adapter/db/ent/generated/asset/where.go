// Code generated by ent, DO NOT EDIT.

package asset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldID, id))
}

// AssetKey applies equality check predicate on the "asset_key" field. It's identical to AssetKeyEQ.
func AssetKey(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldAssetKey, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldStatus, v))
}

// OriginalFilename applies equality check predicate on the "original_filename" field. It's identical to OriginalFilenameEQ.
func OriginalFilename(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldOriginalFilename, v))
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldMimeType, v))
}

// Filesize applies equality check predicate on the "filesize" field. It's identical to FilesizeEQ.
func Filesize(v int64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldFilesize, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v int) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldDurationSeconds, v))
}

// PlaybackURL applies equality check predicate on the "playback_url" field. It's identical to PlaybackURLEQ.
func PlaybackURL(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldPlaybackURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldUpdatedAt, v))
}

// ReadyAt applies equality check predicate on the "ready_at" field. It's identical to ReadyAtEQ.
func ReadyAt(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldReadyAt, v))
}

// AssetKeyEQ applies the EQ predicate on the "asset_key" field.
func AssetKeyEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldAssetKey, v))
}

// AssetKeyNEQ applies the NEQ predicate on the "asset_key" field.
func AssetKeyNEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldAssetKey, v))
}

// AssetKeyIn applies the In predicate on the "asset_key" field.
func AssetKeyIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldAssetKey, vs...))
}

// AssetKeyNotIn applies the NotIn predicate on the "asset_key" field.
func AssetKeyNotIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldAssetKey, vs...))
}

// AssetKeyGT applies the GT predicate on the "asset_key" field.
func AssetKeyGT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldAssetKey, v))
}

// AssetKeyGTE applies the GTE predicate on the "asset_key" field.
func AssetKeyGTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldAssetKey, v))
}

// AssetKeyLT applies the LT predicate on the "asset_key" field.
func AssetKeyLT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldAssetKey, v))
}

// AssetKeyLTE applies the LTE predicate on the "asset_key" field.
func AssetKeyLTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldAssetKey, v))
}

// AssetKeyContains applies the Contains predicate on the "asset_key" field.
func AssetKeyContains(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContains(FieldAssetKey, v))
}

// AssetKeyHasPrefix applies the HasPrefix predicate on the "asset_key" field.
func AssetKeyHasPrefix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasPrefix(FieldAssetKey, v))
}

// AssetKeyHasSuffix applies the HasSuffix predicate on the "asset_key" field.
func AssetKeyHasSuffix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasSuffix(FieldAssetKey, v))
}

// AssetKeyEqualFold applies the EqualFold predicate on the "asset_key" field.
func AssetKeyEqualFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEqualFold(FieldAssetKey, v))
}

// AssetKeyContainsFold applies the ContainsFold predicate on the "asset_key" field.
func AssetKeyContainsFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContainsFold(FieldAssetKey, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldStatus, v))
}

// OriginalFilenameEQ applies the EQ predicate on the "original_filename" field.
func OriginalFilenameEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldOriginalFilename, v))
}

// OriginalFilenameNEQ applies the NEQ predicate on the "original_filename" field.
func OriginalFilenameNEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldOriginalFilename, v))
}

// OriginalFilenameIn applies the In predicate on the "original_filename" field.
func OriginalFilenameIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldOriginalFilename, vs...))
}

// OriginalFilenameNotIn applies the NotIn predicate on the "original_filename" field.
func OriginalFilenameNotIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldOriginalFilename, vs...))
}

// OriginalFilenameGT applies the GT predicate on the "original_filename" field.
func OriginalFilenameGT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldOriginalFilename, v))
}

// OriginalFilenameGTE applies the GTE predicate on the "original_filename" field.
func OriginalFilenameGTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldOriginalFilename, v))
}

// OriginalFilenameLT applies the LT predicate on the "original_filename" field.
func OriginalFilenameLT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldOriginalFilename, v))
}

// OriginalFilenameLTE applies the LTE predicate on the "original_filename" field.
func OriginalFilenameLTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldOriginalFilename, v))
}

// OriginalFilenameContains applies the Contains predicate on the "original_filename" field.
func OriginalFilenameContains(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContains(FieldOriginalFilename, v))
}

// OriginalFilenameHasPrefix applies the HasPrefix predicate on the "original_filename" field.
func OriginalFilenameHasPrefix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasPrefix(FieldOriginalFilename, v))
}

// OriginalFilenameHasSuffix applies the HasSuffix predicate on the "original_filename" field.
func OriginalFilenameHasSuffix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasSuffix(FieldOriginalFilename, v))
}

// OriginalFilenameEqualFold applies the EqualFold predicate on the "original_filename" field.
func OriginalFilenameEqualFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEqualFold(FieldOriginalFilename, v))
}

// OriginalFilenameContainsFold applies the ContainsFold predicate on the "original_filename" field.
func OriginalFilenameContainsFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContainsFold(FieldOriginalFilename, v))
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContainsFold(FieldMimeType, v))
}

// FilesizeEQ applies the EQ predicate on the "filesize" field.
func FilesizeEQ(v int64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldFilesize, v))
}

// FilesizeNEQ applies the NEQ predicate on the "filesize" field.
func FilesizeNEQ(v int64) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldFilesize, v))
}

// FilesizeIn applies the In predicate on the "filesize" field.
func FilesizeIn(vs ...int64) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldFilesize, vs...))
}

// FilesizeNotIn applies the NotIn predicate on the "filesize" field.
func FilesizeNotIn(vs ...int64) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldFilesize, vs...))
}

// FilesizeGT applies the GT predicate on the "filesize" field.
func FilesizeGT(v int64) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldFilesize, v))
}

// FilesizeGTE applies the GTE predicate on the "filesize" field.
func FilesizeGTE(v int64) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldFilesize, v))
}

// FilesizeLT applies the LT predicate on the "filesize" field.
func FilesizeLT(v int64) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldFilesize, v))
}

// FilesizeLTE applies the LTE predicate on the "filesize" field.
func FilesizeLTE(v int64) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldFilesize, v))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v int) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v int) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...int) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...int) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v int) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v int) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v int) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v int) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldDurationSeconds, v))
}

// PlaybackURLEQ applies the EQ predicate on the "playback_url" field.
func PlaybackURLEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldPlaybackURL, v))
}

// PlaybackURLNEQ applies the NEQ predicate on the "playback_url" field.
func PlaybackURLNEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldPlaybackURL, v))
}

// PlaybackURLIn applies the In predicate on the "playback_url" field.
func PlaybackURLIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldPlaybackURL, vs...))
}

// PlaybackURLNotIn applies the NotIn predicate on the "playback_url" field.
func PlaybackURLNotIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldPlaybackURL, vs...))
}

// PlaybackURLGT applies the GT predicate on the "playback_url" field.
func PlaybackURLGT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldPlaybackURL, v))
}

// PlaybackURLGTE applies the GTE predicate on the "playback_url" field.
func PlaybackURLGTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldPlaybackURL, v))
}

// PlaybackURLLT applies the LT predicate on the "playback_url" field.
func PlaybackURLLT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldPlaybackURL, v))
}

// PlaybackURLLTE applies the LTE predicate on the "playback_url" field.
func PlaybackURLLTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldPlaybackURL, v))
}

// PlaybackURLContains applies the Contains predicate on the "playback_url" field.
func PlaybackURLContains(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContains(FieldPlaybackURL, v))
}

// PlaybackURLHasPrefix applies the HasPrefix predicate on the "playback_url" field.
func PlaybackURLHasPrefix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasPrefix(FieldPlaybackURL, v))
}

// PlaybackURLHasSuffix applies the HasSuffix predicate on the "playback_url" field.
func PlaybackURLHasSuffix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasSuffix(FieldPlaybackURL, v))
}

// PlaybackURLIsNil applies the IsNil predicate on the "playback_url" field.
func PlaybackURLIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldPlaybackURL))
}

// PlaybackURLNotNil applies the NotNil predicate on the "playback_url" field.
func PlaybackURLNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldPlaybackURL))
}

// PlaybackURLEqualFold applies the EqualFold predicate on the "playback_url" field.
func PlaybackURLEqualFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEqualFold(FieldPlaybackURL, v))
}

// PlaybackURLContainsFold applies the ContainsFold predicate on the "playback_url" field.
func PlaybackURLContainsFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContainsFold(FieldPlaybackURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldUpdatedAt, v))
}

// ReadyAtEQ applies the EQ predicate on the "ready_at" field.
func ReadyAtEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldReadyAt, v))
}

// ReadyAtNEQ applies the NEQ predicate on the "ready_at" field.
func ReadyAtNEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldReadyAt, v))
}

// ReadyAtIn applies the In predicate on the "ready_at" field.
func ReadyAtIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldReadyAt, vs...))
}

// ReadyAtNotIn applies the NotIn predicate on the "ready_at" field.
func ReadyAtNotIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldReadyAt, vs...))
}

// ReadyAtGT applies the GT predicate on the "ready_at" field.
func ReadyAtGT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldReadyAt, v))
}

// ReadyAtGTE applies the GTE predicate on the "ready_at" field.
func ReadyAtGTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldReadyAt, v))
}

// ReadyAtLT applies the LT predicate on the "ready_at" field.
func ReadyAtLT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldReadyAt, v))
}

// ReadyAtLTE applies the LTE predicate on the "ready_at" field.
func ReadyAtLTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldReadyAt, v))
}

// ReadyAtIsNil applies the IsNil predicate on the "ready_at" field.
func ReadyAtIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldReadyAt))
}

// ReadyAtNotNil applies the NotNil predicate on the "ready_at" field.
func ReadyAtNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldReadyAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Asset) predicate.Asset {
	return predicate.Asset(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Asset) predicate.Asset {
	return predicate.Asset(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Asset) predicate.Asset {
	return predicate.Asset(sql.NotPredicates(p))
}
