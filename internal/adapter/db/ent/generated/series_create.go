// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/episode"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/series"
	"github.com/google/uuid"
)

// SeriesCreate is the builder for creating a Series entity.
type SeriesCreate struct {
	config
	mutation *SeriesMutation
	hooks    []Hook
}

// SetSlug sets the "slug" field.
func (_c *SeriesCreate) SetSlug(v string) *SeriesCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *SeriesCreate) SetTitle(v string) *SeriesCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetSummary sets the "summary" field.
func (_c *SeriesCreate) SetSummary(v string) *SeriesCreate {
	_c.mutation.SetSummary(v)
	return _c
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_c *SeriesCreate) SetNillableSummary(v *string) *SeriesCreate {
	if v != nil {
		_c.SetSummary(*v)
	}
	return _c
}

// SetLanguage sets the "language" field.
func (_c *SeriesCreate) SetLanguage(v string) *SeriesCreate {
	_c.mutation.SetLanguage(v)
	return _c
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_c *SeriesCreate) SetNillableLanguage(v *string) *SeriesCreate {
	if v != nil {
		_c.SetLanguage(*v)
	}
	return _c
}

// SetLevel sets the "level" field.
func (_c *SeriesCreate) SetLevel(v string) *SeriesCreate {
	_c.mutation.SetLevel(v)
	return _c
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (_c *SeriesCreate) SetNillableLevel(v *string) *SeriesCreate {
	if v != nil {
		_c.SetLevel(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *SeriesCreate) SetTags(v []string) *SeriesCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetCoverURL sets the "cover_url" field.
func (_c *SeriesCreate) SetCoverURL(v string) *SeriesCreate {
	_c.mutation.SetCoverURL(v)
	return _c
}

// SetNillableCoverURL sets the "cover_url" field if the given value is not nil.
func (_c *SeriesCreate) SetNillableCoverURL(v *string) *SeriesCreate {
	if v != nil {
		_c.SetCoverURL(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *SeriesCreate) SetStatus(v int) *SeriesCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *SeriesCreate) SetNillableStatus(v *int) *SeriesCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetEpisodeCount sets the "episode_count" field.
func (_c *SeriesCreate) SetEpisodeCount(v int) *SeriesCreate {
	_c.mutation.SetEpisodeCount(v)
	return _c
}

// SetNillableEpisodeCount sets the "episode_count" field if the given value is not nil.
func (_c *SeriesCreate) SetNillableEpisodeCount(v *int) *SeriesCreate {
	if v != nil {
		_c.SetEpisodeCount(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *SeriesCreate) SetCreatedAt(v time.Time) *SeriesCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *SeriesCreate) SetNillableCreatedAt(v *time.Time) *SeriesCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *SeriesCreate) SetUpdatedAt(v time.Time) *SeriesCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *SeriesCreate) SetNillableUpdatedAt(v *time.Time) *SeriesCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetPublishedAt sets the "published_at" field.
func (_c *SeriesCreate) SetPublishedAt(v time.Time) *SeriesCreate {
	_c.mutation.SetPublishedAt(v)
	return _c
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (_c *SeriesCreate) SetNillablePublishedAt(v *time.Time) *SeriesCreate {
	if v != nil {
		_c.SetPublishedAt(*v)
	}
	return _c
}

// SetAuthorIds sets the "author_ids" field.
func (_c *SeriesCreate) SetAuthorIds(v []string) *SeriesCreate {
	_c.mutation.SetAuthorIds(v)
	return _c
}

// SetID sets the "id" field.
func (_c *SeriesCreate) SetID(v uuid.UUID) *SeriesCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *SeriesCreate) SetNillableID(v *uuid.UUID) *SeriesCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (_c *SeriesCreate) AddEpisodeIDs(ids ...uuid.UUID) *SeriesCreate {
	_c.mutation.AddEpisodeIDs(ids...)
	return _c
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (_c *SeriesCreate) AddEpisodes(v ...*Episode) *SeriesCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEpisodeIDs(ids...)
}

// Mutation returns the SeriesMutation object of the builder.
func (_c *SeriesCreate) Mutation() *SeriesMutation {
	return _c.mutation
}

// Save creates the Series in the database.
func (_c *SeriesCreate) Save(ctx context.Context) (*Series, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SeriesCreate) SaveX(ctx context.Context) *Series {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SeriesCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SeriesCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SeriesCreate) defaults() {
	if _, ok := _c.mutation.Summary(); !ok {
		v := series.DefaultSummary
		_c.mutation.SetSummary(v)
	}
	if _, ok := _c.mutation.Language(); !ok {
		v := series.DefaultLanguage
		_c.mutation.SetLanguage(v)
	}
	if _, ok := _c.mutation.Level(); !ok {
		v := series.DefaultLevel
		_c.mutation.SetLevel(v)
	}
	if _, ok := _c.mutation.CoverURL(); !ok {
		v := series.DefaultCoverURL
		_c.mutation.SetCoverURL(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := series.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.EpisodeCount(); !ok {
		v := series.DefaultEpisodeCount
		_c.mutation.SetEpisodeCount(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := series.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := series.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := series.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *SeriesCreate) check() error {
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`generated: missing required field "Series.slug"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "Series.title"`)}
	}
	if _, ok := _c.mutation.Summary(); !ok {
		return &ValidationError{Name: "summary", err: errors.New(`generated: missing required field "Series.summary"`)}
	}
	if _, ok := _c.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`generated: missing required field "Series.language"`)}
	}
	if _, ok := _c.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`generated: missing required field "Series.level"`)}
	}
	if _, ok := _c.mutation.CoverURL(); !ok {
		return &ValidationError{Name: "cover_url", err: errors.New(`generated: missing required field "Series.cover_url"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Series.status"`)}
	}
	if _, ok := _c.mutation.EpisodeCount(); !ok {
		return &ValidationError{Name: "episode_count", err: errors.New(`generated: missing required field "Series.episode_count"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Series.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Series.updated_at"`)}
	}
	return nil
}

func (_c *SeriesCreate) sqlSave(ctx context.Context) (*Series, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SeriesCreate) createSpec() (*Series, *sqlgraph.CreateSpec) {
	var (
		_node = &Series{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(series.Table, sqlgraph.NewFieldSpec(series.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(series.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(series.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Summary(); ok {
		_spec.SetField(series.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := _c.mutation.Language(); ok {
		_spec.SetField(series.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := _c.mutation.Level(); ok {
		_spec.SetField(series.FieldLevel, field.TypeString, value)
		_node.Level = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(series.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.CoverURL(); ok {
		_spec.SetField(series.FieldCoverURL, field.TypeString, value)
		_node.CoverURL = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(series.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.EpisodeCount(); ok {
		_spec.SetField(series.FieldEpisodeCount, field.TypeInt, value)
		_node.EpisodeCount = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(series.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(series.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.PublishedAt(); ok {
		_spec.SetField(series.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = &value
	}
	if value, ok := _c.mutation.AuthorIds(); ok {
		_spec.SetField(series.FieldAuthorIds, field.TypeJSON, value)
		_node.AuthorIds = value
	}
	if nodes := _c.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   series.EpisodesTable,
			Columns: []string{series.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SeriesCreateBulk is the builder for creating many Series entities in bulk.
type SeriesCreateBulk struct {
	config
	err      error
	builders []*SeriesCreate
}

// Save creates the Series entities in the database.
func (_c *SeriesCreateBulk) Save(ctx context.Context) ([]*Series, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Series, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeriesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SeriesCreateBulk) SaveX(ctx context.Context) []*Series {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SeriesCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SeriesCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
