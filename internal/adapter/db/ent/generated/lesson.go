// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/lesson"
	"github.com/google/uuid"
)

// Lesson is the model entity for the Lesson schema.
type Lesson struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Teacher holds the value of the "teacher" field.
	Teacher *string `json:"teacher,omitempty"`
	// DurationMinutes holds the value of the "duration_minutes" field.
	DurationMinutes int `json:"duration_minutes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lesson) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case lesson.FieldDurationMinutes:
			values[i] = new(sql.NullInt64)
		case lesson.FieldTitle, lesson.FieldDescription, lesson.FieldTeacher:
			values[i] = new(sql.NullString)
		case lesson.FieldCreatedAt, lesson.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case lesson.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lesson fields.
func (_m *Lesson) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lesson.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case lesson.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case lesson.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case lesson.FieldTeacher:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field teacher", values[i])
			} else if value.Valid {
				_m.Teacher = new(string)
				*_m.Teacher = value.String
			}
		case lesson.FieldDurationMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_minutes", values[i])
			} else if value.Valid {
				_m.DurationMinutes = int(value.Int64)
			}
		case lesson.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case lesson.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Lesson.
// This includes values selected through modifiers, order, etc.
func (_m *Lesson) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Lesson.
// Note that you need to call Lesson.Unwrap() before calling this method if this Lesson
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Lesson) Update() *LessonUpdateOne {
	return NewLessonClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Lesson entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Lesson) Unwrap() *Lesson {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Lesson is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Lesson) String() string {
	var builder strings.Builder
	builder.WriteString("Lesson(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Teacher; v != nil {
		builder.WriteString("teacher=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("duration_minutes=")
	builder.WriteString(fmt.Sprintf("%v", _m.DurationMinutes))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Lessons is a parsable slice of Lesson.
type Lessons []*Lesson
