// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/uploadsession"
	"github.com/google/uuid"
)

// UploadSession is the model entity for the UploadSession schema.
type UploadSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AssetKey holds the value of the "asset_key" field.
	AssetKey string `json:"asset_key,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Protocol holds the value of the "protocol" field.
	Protocol int `json:"protocol,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// TargetMethod holds the value of the "target_method" field.
	TargetMethod string `json:"target_method,omitempty"`
	// TargetURL holds the value of the "target_url" field.
	TargetURL string `json:"target_url,omitempty"`
	// TargetHeaders holds the value of the "target_headers" field.
	TargetHeaders map[string]string `json:"target_headers,omitempty"`
	// TargetFormFields holds the value of the "target_form_fields" field.
	TargetFormFields map[string]string `json:"target_form_fields,omitempty"`
	// OriginalFilename holds the value of the "original_filename" field.
	OriginalFilename string `json:"original_filename,omitempty"`
	// MimeType holds the value of the "mime_type" field.
	MimeType string `json:"mime_type,omitempty"`
	// ContentLength holds the value of the "content_length" field.
	ContentLength int64 `json:"content_length,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UploadSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case uploadsession.FieldTargetHeaders, uploadsession.FieldTargetFormFields:
			values[i] = new([]byte)
		case uploadsession.FieldType, uploadsession.FieldProtocol, uploadsession.FieldStatus, uploadsession.FieldContentLength:
			values[i] = new(sql.NullInt64)
		case uploadsession.FieldAssetKey, uploadsession.FieldTargetMethod, uploadsession.FieldTargetURL, uploadsession.FieldOriginalFilename, uploadsession.FieldMimeType:
			values[i] = new(sql.NullString)
		case uploadsession.FieldExpiresAt, uploadsession.FieldCreatedAt, uploadsession.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case uploadsession.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UploadSession fields.
func (_m *UploadSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case uploadsession.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case uploadsession.FieldAssetKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asset_key", values[i])
			} else if value.Valid {
				_m.AssetKey = value.String
			}
		case uploadsession.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_m.Type = int(value.Int64)
			}
		case uploadsession.FieldProtocol:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				_m.Protocol = int(value.Int64)
			}
		case uploadsession.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = int(value.Int64)
			}
		case uploadsession.FieldTargetMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_method", values[i])
			} else if value.Valid {
				_m.TargetMethod = value.String
			}
		case uploadsession.FieldTargetURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_url", values[i])
			} else if value.Valid {
				_m.TargetURL = value.String
			}
		case uploadsession.FieldTargetHeaders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field target_headers", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TargetHeaders); err != nil {
					return fmt.Errorf("unmarshal field target_headers: %w", err)
				}
			}
		case uploadsession.FieldTargetFormFields:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field target_form_fields", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.TargetFormFields); err != nil {
					return fmt.Errorf("unmarshal field target_form_fields: %w", err)
				}
			}
		case uploadsession.FieldOriginalFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_filename", values[i])
			} else if value.Valid {
				_m.OriginalFilename = value.String
			}
		case uploadsession.FieldMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime_type", values[i])
			} else if value.Valid {
				_m.MimeType = value.String
			}
		case uploadsession.FieldContentLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field content_length", values[i])
			} else if value.Valid {
				_m.ContentLength = value.Int64
			}
		case uploadsession.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				_m.ExpiresAt = value.Time
			}
		case uploadsession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case uploadsession.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UploadSession.
// This includes values selected through modifiers, order, etc.
func (_m *UploadSession) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this UploadSession.
// Note that you need to call UploadSession.Unwrap() before calling this method if this UploadSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UploadSession) Update() *UploadSessionUpdateOne {
	return NewUploadSessionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UploadSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UploadSession) Unwrap() *UploadSession {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: UploadSession is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UploadSession) String() string {
	var builder strings.Builder
	builder.WriteString("UploadSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("asset_key=")
	builder.WriteString(_m.AssetKey)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _m.Type))
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(fmt.Sprintf("%v", _m.Protocol))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("target_method=")
	builder.WriteString(_m.TargetMethod)
	builder.WriteString(", ")
	builder.WriteString("target_url=")
	builder.WriteString(_m.TargetURL)
	builder.WriteString(", ")
	builder.WriteString("target_headers=")
	builder.WriteString(fmt.Sprintf("%v", _m.TargetHeaders))
	builder.WriteString(", ")
	builder.WriteString("target_form_fields=")
	builder.WriteString(fmt.Sprintf("%v", _m.TargetFormFields))
	builder.WriteString(", ")
	builder.WriteString("original_filename=")
	builder.WriteString(_m.OriginalFilename)
	builder.WriteString(", ")
	builder.WriteString("mime_type=")
	builder.WriteString(_m.MimeType)
	builder.WriteString(", ")
	builder.WriteString("content_length=")
	builder.WriteString(fmt.Sprintf("%v", _m.ContentLength))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(_m.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UploadSessions is a parsable slice of UploadSession.
type UploadSessions []*UploadSession
