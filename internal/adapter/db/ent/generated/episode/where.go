// Code generated by ent, DO NOT EDIT.

package episode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldID, id))
}

// SeriesID applies equality check predicate on the "series_id" field. It's identical to SeriesIDEQ.
func SeriesID(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldSeriesID, v))
}

// Seq applies equality check predicate on the "seq" field. It's identical to SeqEQ.
func Seq(v uint32) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldSeq, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDescription, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDurationSeconds, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldStatus, v))
}

// ResourceAssetID applies equality check predicate on the "resource_asset_id" field. It's identical to ResourceAssetIDEQ.
func ResourceAssetID(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldResourceAssetID, v))
}

// ResourceType applies equality check predicate on the "resource_type" field. It's identical to ResourceTypeEQ.
func ResourceType(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldResourceType, v))
}

// ResourcePlaybackURL applies equality check predicate on the "resource_playback_url" field. It's identical to ResourcePlaybackURLEQ.
func ResourcePlaybackURL(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldResourcePlaybackURL, v))
}

// ResourceMimeType applies equality check predicate on the "resource_mime_type" field. It's identical to ResourceMimeTypeEQ.
func ResourceMimeType(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldResourceMimeType, v))
}

// TranscriptLanguage applies equality check predicate on the "transcript_language" field. It's identical to TranscriptLanguageEQ.
func TranscriptLanguage(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTranscriptLanguage, v))
}

// TranscriptFormat applies equality check predicate on the "transcript_format" field. It's identical to TranscriptFormatEQ.
func TranscriptFormat(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTranscriptFormat, v))
}

// TranscriptContent applies equality check predicate on the "transcript_content" field. It's identical to TranscriptContentEQ.
func TranscriptContent(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTranscriptContent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldUpdatedAt, v))
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldPublishedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDeletedAt, v))
}

// SeriesIDEQ applies the EQ predicate on the "series_id" field.
func SeriesIDEQ(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldSeriesID, v))
}

// SeriesIDNEQ applies the NEQ predicate on the "series_id" field.
func SeriesIDNEQ(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldSeriesID, v))
}

// SeriesIDIn applies the In predicate on the "series_id" field.
func SeriesIDIn(vs ...uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldSeriesID, vs...))
}

// SeriesIDNotIn applies the NotIn predicate on the "series_id" field.
func SeriesIDNotIn(vs ...uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldSeriesID, vs...))
}

// SeqEQ applies the EQ predicate on the "seq" field.
func SeqEQ(v uint32) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldSeq, v))
}

// SeqNEQ applies the NEQ predicate on the "seq" field.
func SeqNEQ(v uint32) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldSeq, v))
}

// SeqIn applies the In predicate on the "seq" field.
func SeqIn(vs ...uint32) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldSeq, vs...))
}

// SeqNotIn applies the NotIn predicate on the "seq" field.
func SeqNotIn(vs ...uint32) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldSeq, vs...))
}

// SeqGT applies the GT predicate on the "seq" field.
func SeqGT(v uint32) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldSeq, v))
}

// SeqGTE applies the GTE predicate on the "seq" field.
func SeqGTE(v uint32) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldSeq, v))
}

// SeqLT applies the LT predicate on the "seq" field.
func SeqLT(v uint32) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldSeq, v))
}

// SeqLTE applies the LTE predicate on the "seq" field.
func SeqLTE(v uint32) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldSeq, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldDescription, v))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldDurationSeconds, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldStatus, v))
}

// ResourceAssetIDEQ applies the EQ predicate on the "resource_asset_id" field.
func ResourceAssetIDEQ(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldResourceAssetID, v))
}

// ResourceAssetIDNEQ applies the NEQ predicate on the "resource_asset_id" field.
func ResourceAssetIDNEQ(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldResourceAssetID, v))
}

// ResourceAssetIDIn applies the In predicate on the "resource_asset_id" field.
func ResourceAssetIDIn(vs ...uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldResourceAssetID, vs...))
}

// ResourceAssetIDNotIn applies the NotIn predicate on the "resource_asset_id" field.
func ResourceAssetIDNotIn(vs ...uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldResourceAssetID, vs...))
}

// ResourceAssetIDGT applies the GT predicate on the "resource_asset_id" field.
func ResourceAssetIDGT(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldResourceAssetID, v))
}

// ResourceAssetIDGTE applies the GTE predicate on the "resource_asset_id" field.
func ResourceAssetIDGTE(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldResourceAssetID, v))
}

// ResourceAssetIDLT applies the LT predicate on the "resource_asset_id" field.
func ResourceAssetIDLT(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldResourceAssetID, v))
}

// ResourceAssetIDLTE applies the LTE predicate on the "resource_asset_id" field.
func ResourceAssetIDLTE(v uuid.UUID) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldResourceAssetID, v))
}

// ResourceAssetIDIsNil applies the IsNil predicate on the "resource_asset_id" field.
func ResourceAssetIDIsNil() predicate.Episode {
	return predicate.Episode(sql.FieldIsNull(FieldResourceAssetID))
}

// ResourceAssetIDNotNil applies the NotNil predicate on the "resource_asset_id" field.
func ResourceAssetIDNotNil() predicate.Episode {
	return predicate.Episode(sql.FieldNotNull(FieldResourceAssetID))
}

// ResourceTypeEQ applies the EQ predicate on the "resource_type" field.
func ResourceTypeEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldResourceType, v))
}

// ResourceTypeNEQ applies the NEQ predicate on the "resource_type" field.
func ResourceTypeNEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldResourceType, v))
}

// ResourceTypeIn applies the In predicate on the "resource_type" field.
func ResourceTypeIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldResourceType, vs...))
}

// ResourceTypeNotIn applies the NotIn predicate on the "resource_type" field.
func ResourceTypeNotIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldResourceType, vs...))
}

// ResourceTypeGT applies the GT predicate on the "resource_type" field.
func ResourceTypeGT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldResourceType, v))
}

// ResourceTypeGTE applies the GTE predicate on the "resource_type" field.
func ResourceTypeGTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldResourceType, v))
}

// ResourceTypeLT applies the LT predicate on the "resource_type" field.
func ResourceTypeLT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldResourceType, v))
}

// ResourceTypeLTE applies the LTE predicate on the "resource_type" field.
func ResourceTypeLTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldResourceType, v))
}

// ResourcePlaybackURLEQ applies the EQ predicate on the "resource_playback_url" field.
func ResourcePlaybackURLEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLNEQ applies the NEQ predicate on the "resource_playback_url" field.
func ResourcePlaybackURLNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLIn applies the In predicate on the "resource_playback_url" field.
func ResourcePlaybackURLIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldResourcePlaybackURL, vs...))
}

// ResourcePlaybackURLNotIn applies the NotIn predicate on the "resource_playback_url" field.
func ResourcePlaybackURLNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldResourcePlaybackURL, vs...))
}

// ResourcePlaybackURLGT applies the GT predicate on the "resource_playback_url" field.
func ResourcePlaybackURLGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLGTE applies the GTE predicate on the "resource_playback_url" field.
func ResourcePlaybackURLGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLLT applies the LT predicate on the "resource_playback_url" field.
func ResourcePlaybackURLLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLLTE applies the LTE predicate on the "resource_playback_url" field.
func ResourcePlaybackURLLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLContains applies the Contains predicate on the "resource_playback_url" field.
func ResourcePlaybackURLContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLHasPrefix applies the HasPrefix predicate on the "resource_playback_url" field.
func ResourcePlaybackURLHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLHasSuffix applies the HasSuffix predicate on the "resource_playback_url" field.
func ResourcePlaybackURLHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLEqualFold applies the EqualFold predicate on the "resource_playback_url" field.
func ResourcePlaybackURLEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldResourcePlaybackURL, v))
}

// ResourcePlaybackURLContainsFold applies the ContainsFold predicate on the "resource_playback_url" field.
func ResourcePlaybackURLContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldResourcePlaybackURL, v))
}

// ResourceMimeTypeEQ applies the EQ predicate on the "resource_mime_type" field.
func ResourceMimeTypeEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldResourceMimeType, v))
}

// ResourceMimeTypeNEQ applies the NEQ predicate on the "resource_mime_type" field.
func ResourceMimeTypeNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldResourceMimeType, v))
}

// ResourceMimeTypeIn applies the In predicate on the "resource_mime_type" field.
func ResourceMimeTypeIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldResourceMimeType, vs...))
}

// ResourceMimeTypeNotIn applies the NotIn predicate on the "resource_mime_type" field.
func ResourceMimeTypeNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldResourceMimeType, vs...))
}

// ResourceMimeTypeGT applies the GT predicate on the "resource_mime_type" field.
func ResourceMimeTypeGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldResourceMimeType, v))
}

// ResourceMimeTypeGTE applies the GTE predicate on the "resource_mime_type" field.
func ResourceMimeTypeGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldResourceMimeType, v))
}

// ResourceMimeTypeLT applies the LT predicate on the "resource_mime_type" field.
func ResourceMimeTypeLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldResourceMimeType, v))
}

// ResourceMimeTypeLTE applies the LTE predicate on the "resource_mime_type" field.
func ResourceMimeTypeLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldResourceMimeType, v))
}

// ResourceMimeTypeContains applies the Contains predicate on the "resource_mime_type" field.
func ResourceMimeTypeContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldResourceMimeType, v))
}

// ResourceMimeTypeHasPrefix applies the HasPrefix predicate on the "resource_mime_type" field.
func ResourceMimeTypeHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldResourceMimeType, v))
}

// ResourceMimeTypeHasSuffix applies the HasSuffix predicate on the "resource_mime_type" field.
func ResourceMimeTypeHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldResourceMimeType, v))
}

// ResourceMimeTypeEqualFold applies the EqualFold predicate on the "resource_mime_type" field.
func ResourceMimeTypeEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldResourceMimeType, v))
}

// ResourceMimeTypeContainsFold applies the ContainsFold predicate on the "resource_mime_type" field.
func ResourceMimeTypeContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldResourceMimeType, v))
}

// TranscriptLanguageEQ applies the EQ predicate on the "transcript_language" field.
func TranscriptLanguageEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTranscriptLanguage, v))
}

// TranscriptLanguageNEQ applies the NEQ predicate on the "transcript_language" field.
func TranscriptLanguageNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldTranscriptLanguage, v))
}

// TranscriptLanguageIn applies the In predicate on the "transcript_language" field.
func TranscriptLanguageIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldTranscriptLanguage, vs...))
}

// TranscriptLanguageNotIn applies the NotIn predicate on the "transcript_language" field.
func TranscriptLanguageNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldTranscriptLanguage, vs...))
}

// TranscriptLanguageGT applies the GT predicate on the "transcript_language" field.
func TranscriptLanguageGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldTranscriptLanguage, v))
}

// TranscriptLanguageGTE applies the GTE predicate on the "transcript_language" field.
func TranscriptLanguageGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldTranscriptLanguage, v))
}

// TranscriptLanguageLT applies the LT predicate on the "transcript_language" field.
func TranscriptLanguageLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldTranscriptLanguage, v))
}

// TranscriptLanguageLTE applies the LTE predicate on the "transcript_language" field.
func TranscriptLanguageLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldTranscriptLanguage, v))
}

// TranscriptLanguageContains applies the Contains predicate on the "transcript_language" field.
func TranscriptLanguageContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldTranscriptLanguage, v))
}

// TranscriptLanguageHasPrefix applies the HasPrefix predicate on the "transcript_language" field.
func TranscriptLanguageHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldTranscriptLanguage, v))
}

// TranscriptLanguageHasSuffix applies the HasSuffix predicate on the "transcript_language" field.
func TranscriptLanguageHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldTranscriptLanguage, v))
}

// TranscriptLanguageEqualFold applies the EqualFold predicate on the "transcript_language" field.
func TranscriptLanguageEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldTranscriptLanguage, v))
}

// TranscriptLanguageContainsFold applies the ContainsFold predicate on the "transcript_language" field.
func TranscriptLanguageContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldTranscriptLanguage, v))
}

// TranscriptFormatEQ applies the EQ predicate on the "transcript_format" field.
func TranscriptFormatEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTranscriptFormat, v))
}

// TranscriptFormatNEQ applies the NEQ predicate on the "transcript_format" field.
func TranscriptFormatNEQ(v int) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldTranscriptFormat, v))
}

// TranscriptFormatIn applies the In predicate on the "transcript_format" field.
func TranscriptFormatIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldTranscriptFormat, vs...))
}

// TranscriptFormatNotIn applies the NotIn predicate on the "transcript_format" field.
func TranscriptFormatNotIn(vs ...int) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldTranscriptFormat, vs...))
}

// TranscriptFormatGT applies the GT predicate on the "transcript_format" field.
func TranscriptFormatGT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldTranscriptFormat, v))
}

// TranscriptFormatGTE applies the GTE predicate on the "transcript_format" field.
func TranscriptFormatGTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldTranscriptFormat, v))
}

// TranscriptFormatLT applies the LT predicate on the "transcript_format" field.
func TranscriptFormatLT(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldTranscriptFormat, v))
}

// TranscriptFormatLTE applies the LTE predicate on the "transcript_format" field.
func TranscriptFormatLTE(v int) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldTranscriptFormat, v))
}

// TranscriptContentEQ applies the EQ predicate on the "transcript_content" field.
func TranscriptContentEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldTranscriptContent, v))
}

// TranscriptContentNEQ applies the NEQ predicate on the "transcript_content" field.
func TranscriptContentNEQ(v string) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldTranscriptContent, v))
}

// TranscriptContentIn applies the In predicate on the "transcript_content" field.
func TranscriptContentIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldTranscriptContent, vs...))
}

// TranscriptContentNotIn applies the NotIn predicate on the "transcript_content" field.
func TranscriptContentNotIn(vs ...string) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldTranscriptContent, vs...))
}

// TranscriptContentGT applies the GT predicate on the "transcript_content" field.
func TranscriptContentGT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldTranscriptContent, v))
}

// TranscriptContentGTE applies the GTE predicate on the "transcript_content" field.
func TranscriptContentGTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldTranscriptContent, v))
}

// TranscriptContentLT applies the LT predicate on the "transcript_content" field.
func TranscriptContentLT(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldTranscriptContent, v))
}

// TranscriptContentLTE applies the LTE predicate on the "transcript_content" field.
func TranscriptContentLTE(v string) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldTranscriptContent, v))
}

// TranscriptContentContains applies the Contains predicate on the "transcript_content" field.
func TranscriptContentContains(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContains(FieldTranscriptContent, v))
}

// TranscriptContentHasPrefix applies the HasPrefix predicate on the "transcript_content" field.
func TranscriptContentHasPrefix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasPrefix(FieldTranscriptContent, v))
}

// TranscriptContentHasSuffix applies the HasSuffix predicate on the "transcript_content" field.
func TranscriptContentHasSuffix(v string) predicate.Episode {
	return predicate.Episode(sql.FieldHasSuffix(FieldTranscriptContent, v))
}

// TranscriptContentEqualFold applies the EqualFold predicate on the "transcript_content" field.
func TranscriptContentEqualFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldEqualFold(FieldTranscriptContent, v))
}

// TranscriptContentContainsFold applies the ContainsFold predicate on the "transcript_content" field.
func TranscriptContentContainsFold(v string) predicate.Episode {
	return predicate.Episode(sql.FieldContainsFold(FieldTranscriptContent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldUpdatedAt, v))
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldPublishedAt, v))
}

// PublishedAtIsNil applies the IsNil predicate on the "published_at" field.
func PublishedAtIsNil() predicate.Episode {
	return predicate.Episode(sql.FieldIsNull(FieldPublishedAt))
}

// PublishedAtNotNil applies the NotNil predicate on the "published_at" field.
func PublishedAtNotNil() predicate.Episode {
	return predicate.Episode(sql.FieldNotNull(FieldPublishedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Episode {
	return predicate.Episode(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Episode {
	return predicate.Episode(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Episode {
	return predicate.Episode(sql.FieldNotNull(FieldDeletedAt))
}

// HasSeries applies the HasEdge predicate on the "series" edge.
func HasSeries() predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SeriesTable, SeriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSeriesWith applies the HasEdge predicate on the "series" edge with a given conditions (other predicates).
func HasSeriesWith(preds ...predicate.Series) predicate.Episode {
	return predicate.Episode(func(s *sql.Selector) {
		step := newSeriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Episode) predicate.Episode {
	return predicate.Episode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Episode) predicate.Episode {
	return predicate.Episode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Episode) predicate.Episode {
	return predicate.Episode(sql.NotPredicates(p))
}
