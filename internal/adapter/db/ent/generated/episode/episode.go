// Code generated by ent, DO NOT EDIT.

package episode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the episode type in the database.
	Label = "episode"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSeriesID holds the string denoting the series_id field in the database.
	FieldSeriesID = "series_id"
	// FieldSeq holds the string denoting the seq field in the database.
	FieldSeq = "seq"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldResourceAssetID holds the string denoting the resource_asset_id field in the database.
	FieldResourceAssetID = "resource_asset_id"
	// FieldResourceType holds the string denoting the resource_type field in the database.
	FieldResourceType = "resource_type"
	// FieldResourcePlaybackURL holds the string denoting the resource_playback_url field in the database.
	FieldResourcePlaybackURL = "resource_playback_url"
	// FieldResourceMimeType holds the string denoting the resource_mime_type field in the database.
	FieldResourceMimeType = "resource_mime_type"
	// FieldTranscriptLanguage holds the string denoting the transcript_language field in the database.
	FieldTranscriptLanguage = "transcript_language"
	// FieldTranscriptFormat holds the string denoting the transcript_format field in the database.
	FieldTranscriptFormat = "transcript_format"
	// FieldTranscriptContent holds the string denoting the transcript_content field in the database.
	FieldTranscriptContent = "transcript_content"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeSeries holds the string denoting the series edge name in mutations.
	EdgeSeries = "series"
	// Table holds the table name of the episode in the database.
	Table = "episodes"
	// SeriesTable is the table that holds the series relation/edge.
	SeriesTable = "episodes"
	// SeriesInverseTable is the table name for the Series entity.
	// It exists in this package in order to avoid circular dependency with the "series" package.
	SeriesInverseTable = "series"
	// SeriesColumn is the table column denoting the series relation/edge.
	SeriesColumn = "series_id"
)

// Columns holds all SQL columns for episode fields.
var Columns = []string{
	FieldID,
	FieldSeriesID,
	FieldSeq,
	FieldTitle,
	FieldDescription,
	FieldDurationSeconds,
	FieldStatus,
	FieldResourceAssetID,
	FieldResourceType,
	FieldResourcePlaybackURL,
	FieldResourceMimeType,
	FieldTranscriptLanguage,
	FieldTranscriptFormat,
	FieldTranscriptContent,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPublishedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultDurationSeconds holds the default value on creation for the "duration_seconds" field.
	DefaultDurationSeconds int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultResourceType holds the default value on creation for the "resource_type" field.
	DefaultResourceType int
	// DefaultResourcePlaybackURL holds the default value on creation for the "resource_playback_url" field.
	DefaultResourcePlaybackURL string
	// DefaultResourceMimeType holds the default value on creation for the "resource_mime_type" field.
	DefaultResourceMimeType string
	// DefaultTranscriptLanguage holds the default value on creation for the "transcript_language" field.
	DefaultTranscriptLanguage string
	// DefaultTranscriptFormat holds the default value on creation for the "transcript_format" field.
	DefaultTranscriptFormat int
	// DefaultTranscriptContent holds the default value on creation for the "transcript_content" field.
	DefaultTranscriptContent string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Episode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySeriesID orders the results by the series_id field.
func BySeriesID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeriesID, opts...).ToFunc()
}

// BySeq orders the results by the seq field.
func BySeq(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeq, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByDurationSeconds orders the results by the duration_seconds field.
func ByDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationSeconds, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByResourceAssetID orders the results by the resource_asset_id field.
func ByResourceAssetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceAssetID, opts...).ToFunc()
}

// ByResourceType orders the results by the resource_type field.
func ByResourceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceType, opts...).ToFunc()
}

// ByResourcePlaybackURL orders the results by the resource_playback_url field.
func ByResourcePlaybackURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourcePlaybackURL, opts...).ToFunc()
}

// ByResourceMimeType orders the results by the resource_mime_type field.
func ByResourceMimeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceMimeType, opts...).ToFunc()
}

// ByTranscriptLanguage orders the results by the transcript_language field.
func ByTranscriptLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTranscriptLanguage, opts...).ToFunc()
}

// ByTranscriptFormat orders the results by the transcript_format field.
func ByTranscriptFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTranscriptFormat, opts...).ToFunc()
}

// ByTranscriptContent orders the results by the transcript_content field.
func ByTranscriptContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTranscriptContent, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// BySeriesField orders the results by series field.
func BySeriesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSeriesStep(), sql.OrderByField(field, opts...))
	}
}
func newSeriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SeriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SeriesTable, SeriesColumn),
	)
}
