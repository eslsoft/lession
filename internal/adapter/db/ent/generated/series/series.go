// Code generated by ent, DO NOT EDIT.

package series

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the series type in the database.
	Label = "series"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldCoverURL holds the string denoting the cover_url field in the database.
	FieldCoverURL = "cover_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEpisodeCount holds the string denoting the episode_count field in the database.
	FieldEpisodeCount = "episode_count"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPublishedAt holds the string denoting the published_at field in the database.
	FieldPublishedAt = "published_at"
	// FieldAuthorIds holds the string denoting the author_ids field in the database.
	FieldAuthorIds = "author_ids"
	// EdgeEpisodes holds the string denoting the episodes edge name in mutations.
	EdgeEpisodes = "episodes"
	// Table holds the table name of the series in the database.
	Table = "series"
	// EpisodesTable is the table that holds the episodes relation/edge.
	EpisodesTable = "episodes"
	// EpisodesInverseTable is the table name for the Episode entity.
	// It exists in this package in order to avoid circular dependency with the "episode" package.
	EpisodesInverseTable = "episodes"
	// EpisodesColumn is the table column denoting the episodes relation/edge.
	EpisodesColumn = "series_id"
)

// Columns holds all SQL columns for series fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldTitle,
	FieldSummary,
	FieldLanguage,
	FieldLevel,
	FieldTags,
	FieldCoverURL,
	FieldStatus,
	FieldEpisodeCount,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPublishedAt,
	FieldAuthorIds,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSummary holds the default value on creation for the "summary" field.
	DefaultSummary string
	// DefaultLanguage holds the default value on creation for the "language" field.
	DefaultLanguage string
	// DefaultLevel holds the default value on creation for the "level" field.
	DefaultLevel string
	// DefaultCoverURL holds the default value on creation for the "cover_url" field.
	DefaultCoverURL string
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultEpisodeCount holds the default value on creation for the "episode_count" field.
	DefaultEpisodeCount int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Series queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySlug orders the results by the slug field.
func BySlug(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlug, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// BySummary orders the results by the summary field.
func BySummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummary, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByCoverURL orders the results by the cover_url field.
func ByCoverURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEpisodeCount orders the results by the episode_count field.
func ByEpisodeCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEpisodeCount, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPublishedAt orders the results by the published_at field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByEpisodesCount orders the results by episodes count.
func ByEpisodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEpisodesStep(), opts...)
	}
}

// ByEpisodes orders the results by episodes terms.
func ByEpisodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpisodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEpisodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpisodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EpisodesTable, EpisodesColumn),
	)
}
