// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/lesson"
	"github.com/eslsoft/lession/internal/adapter/db/ent/generated/predicate"
)

// LessonUpdate is the builder for updating Lesson entities.
type LessonUpdate struct {
	config
	hooks    []Hook
	mutation *LessonMutation
}

// Where appends a list predicates to the LessonUpdate builder.
func (_u *LessonUpdate) Where(ps ...predicate.Lesson) *LessonUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *LessonUpdate) SetTitle(v string) *LessonUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *LessonUpdate) SetNillableTitle(v *string) *LessonUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *LessonUpdate) SetDescription(v string) *LessonUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *LessonUpdate) SetNillableDescription(v *string) *LessonUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *LessonUpdate) ClearDescription() *LessonUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetTeacher sets the "teacher" field.
func (_u *LessonUpdate) SetTeacher(v string) *LessonUpdate {
	_u.mutation.SetTeacher(v)
	return _u
}

// SetNillableTeacher sets the "teacher" field if the given value is not nil.
func (_u *LessonUpdate) SetNillableTeacher(v *string) *LessonUpdate {
	if v != nil {
		_u.SetTeacher(*v)
	}
	return _u
}

// ClearTeacher clears the value of the "teacher" field.
func (_u *LessonUpdate) ClearTeacher() *LessonUpdate {
	_u.mutation.ClearTeacher()
	return _u
}

// SetDurationMinutes sets the "duration_minutes" field.
func (_u *LessonUpdate) SetDurationMinutes(v int) *LessonUpdate {
	_u.mutation.ResetDurationMinutes()
	_u.mutation.SetDurationMinutes(v)
	return _u
}

// SetNillableDurationMinutes sets the "duration_minutes" field if the given value is not nil.
func (_u *LessonUpdate) SetNillableDurationMinutes(v *int) *LessonUpdate {
	if v != nil {
		_u.SetDurationMinutes(*v)
	}
	return _u
}

// AddDurationMinutes adds value to the "duration_minutes" field.
func (_u *LessonUpdate) AddDurationMinutes(v int) *LessonUpdate {
	_u.mutation.AddDurationMinutes(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LessonUpdate) SetUpdatedAt(v time.Time) *LessonUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the LessonMutation object of the builder.
func (_u *LessonUpdate) Mutation() *LessonMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LessonUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LessonUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LessonUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LessonUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LessonUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := lesson.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *LessonUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(lesson.Table, lesson.Columns, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(lesson.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(lesson.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(lesson.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Teacher(); ok {
		_spec.SetField(lesson.FieldTeacher, field.TypeString, value)
	}
	if _u.mutation.TeacherCleared() {
		_spec.ClearField(lesson.FieldTeacher, field.TypeString)
	}
	if value, ok := _u.mutation.DurationMinutes(); ok {
		_spec.SetField(lesson.FieldDurationMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationMinutes(); ok {
		_spec.AddField(lesson.FieldDurationMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(lesson.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LessonUpdateOne is the builder for updating a single Lesson entity.
type LessonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LessonMutation
}

// SetTitle sets the "title" field.
func (_u *LessonUpdateOne) SetTitle(v string) *LessonUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *LessonUpdateOne) SetNillableTitle(v *string) *LessonUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *LessonUpdateOne) SetDescription(v string) *LessonUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *LessonUpdateOne) SetNillableDescription(v *string) *LessonUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *LessonUpdateOne) ClearDescription() *LessonUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetTeacher sets the "teacher" field.
func (_u *LessonUpdateOne) SetTeacher(v string) *LessonUpdateOne {
	_u.mutation.SetTeacher(v)
	return _u
}

// SetNillableTeacher sets the "teacher" field if the given value is not nil.
func (_u *LessonUpdateOne) SetNillableTeacher(v *string) *LessonUpdateOne {
	if v != nil {
		_u.SetTeacher(*v)
	}
	return _u
}

// ClearTeacher clears the value of the "teacher" field.
func (_u *LessonUpdateOne) ClearTeacher() *LessonUpdateOne {
	_u.mutation.ClearTeacher()
	return _u
}

// SetDurationMinutes sets the "duration_minutes" field.
func (_u *LessonUpdateOne) SetDurationMinutes(v int) *LessonUpdateOne {
	_u.mutation.ResetDurationMinutes()
	_u.mutation.SetDurationMinutes(v)
	return _u
}

// SetNillableDurationMinutes sets the "duration_minutes" field if the given value is not nil.
func (_u *LessonUpdateOne) SetNillableDurationMinutes(v *int) *LessonUpdateOne {
	if v != nil {
		_u.SetDurationMinutes(*v)
	}
	return _u
}

// AddDurationMinutes adds value to the "duration_minutes" field.
func (_u *LessonUpdateOne) AddDurationMinutes(v int) *LessonUpdateOne {
	_u.mutation.AddDurationMinutes(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LessonUpdateOne) SetUpdatedAt(v time.Time) *LessonUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the LessonMutation object of the builder.
func (_u *LessonUpdateOne) Mutation() *LessonMutation {
	return _u.mutation
}

// Where appends a list predicates to the LessonUpdate builder.
func (_u *LessonUpdateOne) Where(ps ...predicate.Lesson) *LessonUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LessonUpdateOne) Select(field string, fields ...string) *LessonUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Lesson entity.
func (_u *LessonUpdateOne) Save(ctx context.Context) (*Lesson, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LessonUpdateOne) SaveX(ctx context.Context) *Lesson {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LessonUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LessonUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LessonUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := lesson.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *LessonUpdateOne) sqlSave(ctx context.Context) (_node *Lesson, err error) {
	_spec := sqlgraph.NewUpdateSpec(lesson.Table, lesson.Columns, sqlgraph.NewFieldSpec(lesson.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Lesson.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lesson.FieldID)
		for _, f := range fields {
			if !lesson.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != lesson.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(lesson.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(lesson.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(lesson.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Teacher(); ok {
		_spec.SetField(lesson.FieldTeacher, field.TypeString, value)
	}
	if _u.mutation.TeacherCleared() {
		_spec.ClearField(lesson.FieldTeacher, field.TypeString)
	}
	if value, ok := _u.mutation.DurationMinutes(); ok {
		_spec.SetField(lesson.FieldDurationMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDurationMinutes(); ok {
		_spec.AddField(lesson.FieldDurationMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(lesson.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Lesson{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lesson.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
